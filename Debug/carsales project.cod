; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29912.0 

	TITLE	C:\Users\Administrator\Desktop\carsales project\carsales project\Debug\carsales project.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_MENU_STATE
PUBLIC	_shopCars
PUBLIC	??_C@_0L@GGPDJBOI@Bentley?5A1@			; `string'
PUBLIC	??_C@_04NLMPFAMD@Ford@				; `string'
PUBLIC	??_C@_06GCKPJHNJ@Jaguar@			; `string'
PUBLIC	??_C@_04EGEFDPAG@Jeep@				; `string'
PUBLIC	??_C@_0L@DONHMDAB@Land?5Rover@			; `string'
PUBLIC	??_C@_08EIJMMINA@Maserati@			; `string'
PUBLIC	_shopPrices
PUBLIC	_shopStock
PUBLIC	_age
PUBLIC	_discount
_BSS	SEGMENT
_age	DW	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_name:BYTE:014H
_DATA	ENDS
_BSS	SEGMENT
	ALIGN	4

_discount DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_purchases:BYTE:0cH
_DATA	ENDS
msvcjmc	SEGMENT
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__E5C7318A_carsales project@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_08EIJMMINA@Maserati@
CONST	SEGMENT
??_C@_08EIJMMINA@Maserati@ DB 'Maserati', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DONHMDAB@Land?5Rover@
CONST	SEGMENT
??_C@_0L@DONHMDAB@Land?5Rover@ DB 'Land Rover', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EGEFDPAG@Jeep@
CONST	SEGMENT
??_C@_04EGEFDPAG@Jeep@ DB 'Jeep', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCKPJHNJ@Jaguar@
CONST	SEGMENT
??_C@_06GCKPJHNJ@Jaguar@ DB 'Jaguar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NLMPFAMD@Ford@
CONST	SEGMENT
??_C@_04NLMPFAMD@Ford@ DB 'Ford', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GGPDJBOI@Bentley?5A1@
CONST	SEGMENT
??_C@_0L@GGPDJBOI@Bentley?5A1@ DB 'Bentley A1', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_MENU_STATE DW	063H
	ORG $+2
_shopCars DD	FLAT:??_C@_0L@GGPDJBOI@Bentley?5A1@
	DD	FLAT:??_C@_04NLMPFAMD@Ford@
	DD	FLAT:??_C@_06GCKPJHNJ@Jaguar@
	DD	FLAT:??_C@_04EGEFDPAG@Jeep@
	DD	FLAT:??_C@_0L@DONHMDAB@Land?5Rover@
	DD	FLAT:??_C@_08EIJMMINA@Maserati@
_shopPrices DD	05dc0H
	DD	032c8H
	DD	09c40H
	DD	0c350H
	DD	055f0H
	DD	01H
_shopStock DD	0aH
	DD	09H
	DD	08H
	DD	07H
	DD	02H
	DD	05H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_printf
PUBLIC	__vfscanf_l
PUBLIC	_fscanf
PUBLIC	_scanf
PUBLIC	_hasCarsPurchased
PUBLIC	_isCarInStock
PUBLIC	_loadData
PUBLIC	_saveData
PUBLIC	_purchaseCar
PUBLIC	_getSortedCarStocksArray
PUBLIC	_getCarNumberFromName
PUBLIC	_askDetails
PUBLIC	_listCarMenu
PUBLIC	_listUserCarsMenu
PUBLIC	_listCarSales
PUBLIC	_restock
PUBLIC	_freePurchasesMemory
PUBLIC	_getUnsignedShortFromInput
PUBLIC	_getStringFromInput
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BP@OCEMGIIH@Welcome?5to?5the?5car?5sales?5shop?$CB@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BL@IPBOFJEO@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5CUSTOMER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0CE@JJDDKPBE@1?4?5List?5available?5Cars?5for?5purc@ ; `string'
PUBLIC	??_C@_0BL@LOBOMLFA@2?4?5List?5customer?5purchases@ ; `string'
PUBLIC	??_C@_0L@BDCMNGGP@3?4?5Buy?5Car@		; `string'
PUBLIC	??_C@_0BD@IDBFFLNG@4?4?5Change?5customer@	; `string'
PUBLIC	??_C@_0BK@HOBBEMFI@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5MANAGER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0BC@KNPFBCLF@5?4?5View?5All?5sales@	; `string'
PUBLIC	??_C@_0BA@FJGLBFI@6?4?5Restock?5cars@		; `string'
PUBLIC	??_C@_07LFPDCHAL@0?4?5Exit@			; `string'
PUBLIC	??_C@_03FNNLGIME@?$CFhu@			; `string'
PUBLIC	??_C@_0CA@NOFOOAPJ@Invalid?5Input?5please?5try?5again?4@ ; `string'
PUBLIC	??_C@_0BF@KJCEJDDI@something?5went?5wrong@	; `string'
PUBLIC	??_C@_0CL@IBPFPHKL@Press?5ENTER?5to?5continue?5using?5t@ ; `string'
PUBLIC	??_C@_03LCPHGAHP@cls@				; `string'
PUBLIC	??_C@_0BL@LNFAHOBG@Thanks?5for?5using?5our?5shop?$CB@ ; `string'
PUBLIC	??_C@_0BO@INANGNIE@Which?5car?5do?5you?5want?5to?5buy?$DP@ ; `string'
PUBLIC	??_C@_0N@CPJOOGNP@Invalid?5car?4@		; `string'
PUBLIC	??_C@_0BL@DOFKKNPB@That?5car?5is?5not?5available?4@ ; `string'
PUBLIC	??_C@_0EF@MOCADHFM@You?5are?5eligible?5for?5discount?$CB?5@ ; `string'
PUBLIC	??_C@_0CO@KNEDOKBP@Coudln?8t?5complete?5your?5order?$CB?5T@ ; `string'
PUBLIC	??_C@_0BG@HLADGABG@Congratulations?5?$CFs?0?5?6@ ; `string'
PUBLIC	??_C@_0DK@FNJFJKBH@You?5have?5just?5succesfully?5purch@ ; `string'
PUBLIC	??_C@_0CD@HOICFALD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0BG@NLOLPOFC@Name?5of?5the?5car?3?5?$CFs?5?6@ ; `string'
PUBLIC	??_C@_0BA@GFBKPIIF@Remaining?3?5?$CFd?5?6@	; `string'
PUBLIC	??_C@_0BD@IDGDAABO@Price?3?5?$CFd?5pounds?5?6@	; `string'
PUBLIC	??_C@_0BL@PCAFJADG@Currently?5you?5have?5no?5cars@ ; `string'
PUBLIC	??_C@_0DA@HPABEOGE@Here?5is?5the?5list?5of?5cars?5you?5cu@ ; `string'
PUBLIC	??_C@_0BE@LGANKJDA@?5?5?5?5?5?5?5?5?5?5?5?9?5?$CFs?5?5?5?6@ ; `string'
PUBLIC	??_C@_0BM@IGGDGEEC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?5pounds?6@ ; `string'
PUBLIC	??_C@_0BP@EPPJMKLB@Total?5money?5spent?3?5?$CFd?5pounds?5?6@ ; `string'
PUBLIC	??_C@_0O@JEIEPEKG@No?5sales?5yet?4@		; `string'
PUBLIC	??_C@_0N@LEAOOHEI@?5?5?5Car?3?5?$CFs?5?6@	; `string'
PUBLIC	??_C@_0CB@NFHCDHOI@?5?5?5?5?5?5?5?9?5Total?5Sales?3?5?$CFd?5pounds@ ; `string'
PUBLIC	??_C@_0CJ@GIEJKJJM@?5?5?5?5?5?5?5?9?5Total?5Amount?5of?5cars?5s@ ; `string'
PUBLIC	??_C@_0BC@GDHIJBBD@?5?5?5?5?5?5?5?9?5Buyers?3?5@ ; `string'
PUBLIC	??_C@_04DJCABLIL@?$CFs?$CFc@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_09BCHCLGJI@sales?4txt@			; `string'
PUBLIC	??_C@_0BG@KFCFPGBD@?$CFd?3?$CFd?3?$CFd?3?$CFhu?3?$CFhu?3?$CF19s@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0BH@HOPEIMKC@?$CFd?3?$CFd?3?$CFd?3?$CFhu?3?$CFhu?3?$CF19s?6@ ; `string'
PUBLIC	??_C@_0BN@PPHLOIOH@All?5cars?5have?5been?5restocked@ ; `string'
PUBLIC	??_C@_0BD@PMBBMMKN@What?5is?5your?5name?$DP@	; `string'
PUBLIC	??_C@_05IBLILGKA@?6?$CF19s@			; `string'
PUBLIC	??_C@_0BC@PHFONAAN@What?5is?5your?5age?$DP@	; `string'
PUBLIC	??_C@_0EA@FPINJJOD@Our?5system?5detected?5that?5you?5ar@ ; `string'
PUBLIC	??_C@_0EG@NKNOKGHF@To?5encourage?5ambition?5and?5drive@ ; `string'
PUBLIC	??_C@_0EJ@MAFECBAO@Too?5ensure?5safety?5on?5the?5roads?0@ ; `string'
PUBLIC	??_C@_07HIDJNEEJ@?6?$CF?$FL?$FO?6?$FNs@		; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fgetc:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__getchar:PROC
EXTRN	__imp__puts:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vfscanf:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__exit:PROC
EXTRN	__imp__system:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	_vector_init:PROC
EXTRN	_vector_total:PROC
EXTRN	_vector_add:PROC
EXTRN	_vector_get:PROC
EXTRN	_vector_free:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_07HIDJNEEJ@?6?$CF?$FL?$FO?6?$FNs@
CONST	SEGMENT
??_C@_07HIDJNEEJ@?6?$CF?$FL?$FO?6?$FNs@ DB 0aH, '%[^', 0aH, ']s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@MAFECBAO@Too?5ensure?5safety?5on?5the?5roads?0@
CONST	SEGMENT
??_C@_0EJ@MAFECBAO@Too?5ensure?5safety?5on?5the?5roads?0@ DB 'Too ensure '
	DB	'safety on the roads, you are not allowed to use this program.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@NKNOKGHF@To?5encourage?5ambition?5and?5drive@
CONST	SEGMENT
??_C@_0EG@NKNOKGHF@To?5encourage?5ambition?5and?5drive@ DB 'To encourage '
	DB	'ambition and drive we provide a 60 discount on all cars.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@FPINJJOD@Our?5system?5detected?5that?5you?5ar@
CONST	SEGMENT
??_C@_0EA@FPINJJOD@Our?5system?5detected?5that?5you?5ar@ DB 'Our system d'
	DB	'etected that you are quite young to purchase a car!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PHFONAAN@What?5is?5your?5age?$DP@
CONST	SEGMENT
??_C@_0BC@PHFONAAN@What?5is?5your?5age?$DP@ DB 'What is your age?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IBLILGKA@?6?$CF19s@
CONST	SEGMENT
??_C@_05IBLILGKA@?6?$CF19s@ DB 0aH, '%19s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PMBBMMKN@What?5is?5your?5name?$DP@
CONST	SEGMENT
??_C@_0BD@PMBBMMKN@What?5is?5your?5name?$DP@ DB 'What is your name?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PPHLOIOH@All?5cars?5have?5been?5restocked@
CONST	SEGMENT
??_C@_0BN@PPHLOIOH@All?5cars?5have?5been?5restocked@ DB 'All cars have be'
	DB	'en restocked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HOPEIMKC@?$CFd?3?$CFd?3?$CFd?3?$CFhu?3?$CFhu?3?$CF19s?6@
CONST	SEGMENT
??_C@_0BH@HOPEIMKC@?$CFd?3?$CFd?3?$CFd?3?$CFhu?3?$CFhu?3?$CF19s?6@ DB '%d'
	DB	':%d:%d:%hu:%hu:%19s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KFCFPGBD@?$CFd?3?$CFd?3?$CFd?3?$CFhu?3?$CFhu?3?$CF19s@
CONST	SEGMENT
??_C@_0BG@KFCFPGBD@?$CFd?3?$CFd?3?$CFd?3?$CFhu?3?$CFhu?3?$CF19s@ DB '%d:%'
	DB	'd:%d:%hu:%hu:%19s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09BCHCLGJI@sales?4txt@
CONST	SEGMENT
??_C@_09BCHCLGJI@sales?4txt@ DB 'sales.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04DJCABLIL@?$CFs?$CFc@
CONST	SEGMENT
??_C@_04DJCABLIL@?$CFs?$CFc@ DB '%s%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GDHIJBBD@?5?5?5?5?5?5?5?9?5Buyers?3?5@
CONST	SEGMENT
??_C@_0BC@GDHIJBBD@?5?5?5?5?5?5?5?9?5Buyers?3?5@ DB '       - Buyers: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GIEJKJJM@?5?5?5?5?5?5?5?9?5Total?5Amount?5of?5cars?5s@
CONST	SEGMENT
??_C@_0CJ@GIEJKJJM@?5?5?5?5?5?5?5?9?5Total?5Amount?5of?5cars?5s@ DB '    '
	DB	'   - Total Amount of cars sold: %d ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NFHCDHOI@?5?5?5?5?5?5?5?9?5Total?5Sales?3?5?$CFd?5pounds@
CONST	SEGMENT
??_C@_0CB@NFHCDHOI@?5?5?5?5?5?5?5?9?5Total?5Sales?3?5?$CFd?5pounds@ DB ' '
	DB	'      - Total Sales: %d pounds', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEAOOHEI@?5?5?5Car?3?5?$CFs?5?6@
CONST	SEGMENT
??_C@_0N@LEAOOHEI@?5?5?5Car?3?5?$CFs?5?6@ DB '   Car: %s ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JEIEPEKG@No?5sales?5yet?4@
CONST	SEGMENT
??_C@_0O@JEIEPEKG@No?5sales?5yet?4@ DB 'No sales yet.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EPPJMKLB@Total?5money?5spent?3?5?$CFd?5pounds?5?6@
CONST	SEGMENT
??_C@_0BP@EPPJMKLB@Total?5money?5spent?3?5?$CFd?5pounds?5?6@ DB 'Total mo'
	DB	'ney spent: %d pounds ', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IGGDGEEC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?5pounds?6@
CONST	SEGMENT
??_C@_0BM@IGGDGEEC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?5pounds?6@ DB ' '
	DB	'                %d pounds', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LGANKJDA@?5?5?5?5?5?5?5?5?5?5?5?9?5?$CFs?5?5?5?6@
CONST	SEGMENT
??_C@_0BE@LGANKJDA@?5?5?5?5?5?5?5?5?5?5?5?9?5?$CFs?5?5?5?6@ DB '         '
	DB	'  - %s   ', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HPABEOGE@Here?5is?5the?5list?5of?5cars?5you?5cu@
CONST	SEGMENT
??_C@_0DA@HPABEOGE@Here?5is?5the?5list?5of?5cars?5you?5cu@ DB 'Here is th'
	DB	'e list of cars you currently posess: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PCAFJADG@Currently?5you?5have?5no?5cars@
CONST	SEGMENT
??_C@_0BL@PCAFJADG@Currently?5you?5have?5no?5cars@ DB 'Currently you have'
	DB	' no cars', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IDGDAABO@Price?3?5?$CFd?5pounds?5?6@
CONST	SEGMENT
??_C@_0BD@IDGDAABO@Price?3?5?$CFd?5pounds?5?6@ DB 'Price: %d pounds ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFBKPIIF@Remaining?3?5?$CFd?5?6@
CONST	SEGMENT
??_C@_0BA@GFBKPIIF@Remaining?3?5?$CFd?5?6@ DB 'Remaining: %d ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NLOLPOFC@Name?5of?5the?5car?3?5?$CFs?5?6@
CONST	SEGMENT
??_C@_0BG@NLOLPOFC@Name?5of?5the?5car?3?5?$CFs?5?6@ DB 'Name of the car: '
	DB	'%s ', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HOICFALD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0CD@HOICFALD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ DB '='
	DB	'=================================', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@FNJFJKBH@You?5have?5just?5succesfully?5purch@
CONST	SEGMENT
??_C@_0DK@FNJFJKBH@You?5have?5just?5succesfully?5purch@ DB 'You have just'
	DB	' succesfully purchased a %s for %d pounds. ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HLADGABG@Congratulations?5?$CFs?0?5?6@
CONST	SEGMENT
??_C@_0BG@HLADGABG@Congratulations?5?$CFs?0?5?6@ DB 'Congratulations %s, '
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KNEDOKBP@Coudln?8t?5complete?5your?5order?$CB?5T@
CONST	SEGMENT
??_C@_0CO@KNEDOKBP@Coudln?8t?5complete?5your?5order?$CB?5T@ DB 'Coudln''t'
	DB	' complete your order! Try again later', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@MOCADHFM@You?5are?5eligible?5for?5discount?$CB?5@
CONST	SEGMENT
??_C@_0EF@MOCADHFM@You?5are?5eligible?5for?5discount?$CB?5@ DB 'You are e'
	DB	'ligible for discount! Original price: %d  Final price: %d ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DOFKKNPB@That?5car?5is?5not?5available?4@
CONST	SEGMENT
??_C@_0BL@DOFKKNPB@That?5car?5is?5not?5available?4@ DB 'That car is not a'
	DB	'vailable.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CPJOOGNP@Invalid?5car?4@
CONST	SEGMENT
??_C@_0N@CPJOOGNP@Invalid?5car?4@ DB 'Invalid car.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@INANGNIE@Which?5car?5do?5you?5want?5to?5buy?$DP@
CONST	SEGMENT
??_C@_0BO@INANGNIE@Which?5car?5do?5you?5want?5to?5buy?$DP@ DB 'Which car '
	DB	'do you want to buy?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LNFAHOBG@Thanks?5for?5using?5our?5shop?$CB@
CONST	SEGMENT
??_C@_0BL@LNFAHOBG@Thanks?5for?5using?5our?5shop?$CB@ DB 'Thanks for usin'
	DB	'g our shop!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03LCPHGAHP@cls@
CONST	SEGMENT
??_C@_03LCPHGAHP@cls@ DB 'cls', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IBPFPHKL@Press?5ENTER?5to?5continue?5using?5t@
CONST	SEGMENT
??_C@_0CL@IBPFPHKL@Press?5ENTER?5to?5continue?5using?5t@ DB 'Press ENTER '
	DB	'to continue using the program.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KJCEJDDI@something?5went?5wrong@
CONST	SEGMENT
??_C@_0BF@KJCEJDDI@something?5went?5wrong@ DB 'something went wrong', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NOFOOAPJ@Invalid?5Input?5please?5try?5again?4@
CONST	SEGMENT
??_C@_0CA@NOFOOAPJ@Invalid?5Input?5please?5try?5again?4@ DB 'Invalid Inpu'
	DB	't please try again.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FNNLGIME@?$CFhu@
CONST	SEGMENT
??_C@_03FNNLGIME@?$CFhu@ DB '%hu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LFPDCHAL@0?4?5Exit@
CONST	SEGMENT
??_C@_07LFPDCHAL@0?4?5Exit@ DB '0. Exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FJGLBFI@6?4?5Restock?5cars@
CONST	SEGMENT
??_C@_0BA@FJGLBFI@6?4?5Restock?5cars@ DB '6. Restock cars', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KNPFBCLF@5?4?5View?5All?5sales@
CONST	SEGMENT
??_C@_0BC@KNPFBCLF@5?4?5View?5All?5sales@ DB '5. View All sales', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HOBBEMFI@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5MANAGER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0BK@HOBBEMFI@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5MANAGER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ DB '='
	DB	'======= MANAGER ========', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IDBFFLNG@4?4?5Change?5customer@
CONST	SEGMENT
??_C@_0BD@IDBFFLNG@4?4?5Change?5customer@ DB '4. Change customer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BDCMNGGP@3?4?5Buy?5Car@
CONST	SEGMENT
??_C@_0L@BDCMNGGP@3?4?5Buy?5Car@ DB '3. Buy Car', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LOBOMLFA@2?4?5List?5customer?5purchases@
CONST	SEGMENT
??_C@_0BL@LOBOMLFA@2?4?5List?5customer?5purchases@ DB '2. List customer p'
	DB	'urchases', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JJDDKPBE@1?4?5List?5available?5Cars?5for?5purc@
CONST	SEGMENT
??_C@_0CE@JJDDKPBE@1?4?5List?5available?5Cars?5for?5purc@ DB '1. List ava'
	DB	'ilable Cars for purchase', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IPBOFJEO@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5CUSTOMER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0BL@IPBOFJEO@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5CUSTOMER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ DB '='
	DB	'======= CUSTOMER ========', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OCEMGIIH@Welcome?5to?5the?5car?5sales?5shop?$CB@
CONST	SEGMENT
??_C@_0BP@OCEMGIIH@Welcome?5to?5the?5car?5sales?5shop?$CB@ DB 'Welcome to'
	DB	' the car sales shop!', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _main
_TEXT	SEGMENT
tv91 = -208						; size = 4
_result$1 = -8						; size = 4
_main	PROC						; COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  : 
; 147  :     vector_init(&purchases);

  00028	68 00 00 00 00	 push	 OFFSET _purchases
  0002d	e8 00 00 00 00	 call	 _vector_init
  00032	83 c4 04	 add	 esp, 4

; 148  :    
; 149  :     puts("Welcome to the car sales shop!");

  00035	8b f4		 mov	 esi, esp
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OCEMGIIH@Welcome?5to?5the?5car?5sales?5shop?$CB@
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 150  : 
; 151  :     loadData(); // loading initial data

  0004c	e8 00 00 00 00	 call	 _loadData

; 152  :     askDetails(); // setups customer info

  00051	e8 00 00 00 00	 call	 _askDetails
$LN4@main:

; 153  : 
; 154  :     do {
; 155  : 
; 156  :         puts("");

  00056	8b f4		 mov	 esi, esp
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00063	83 c4 04	 add	 esp, 4
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 157  :         puts("======== CUSTOMER ========");

  0006d	8b f4		 mov	 esi, esp
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IPBOFJEO@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5CUSTOMER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0007a	83 c4 04	 add	 esp, 4
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 158  :         puts("1. List available Cars for purchase");

  00084	8b f4		 mov	 esi, esp
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@JJDDKPBE@1?4?5List?5available?5Cars?5for?5purc@
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 159  :         puts("2. List customer purchases");

  0009b	8b f4		 mov	 esi, esp
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LOBOMLFA@2?4?5List?5customer?5purchases@
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000a8	83 c4 04	 add	 esp, 4
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 160  :         puts("3. Buy Car");

  000b2	8b f4		 mov	 esi, esp
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BDCMNGGP@3?4?5Buy?5Car@
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000bf	83 c4 04	 add	 esp, 4
  000c2	3b f4		 cmp	 esi, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 161  :         puts("4. Change customer");

  000c9	8b f4		 mov	 esi, esp
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IDBFFLNG@4?4?5Change?5customer@
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000d6	83 c4 04	 add	 esp, 4
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 162  :         puts("======== CUSTOMER ========");

  000e0	8b f4		 mov	 esi, esp
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IPBOFJEO@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5CUSTOMER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000ed	83 c4 04	 add	 esp, 4
  000f0	3b f4		 cmp	 esi, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 163  :         puts("");

  000f7	8b f4		 mov	 esi, esp
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00104	83 c4 04	 add	 esp, 4
  00107	3b f4		 cmp	 esi, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 164  :         puts("======== MANAGER ========");

  0010e	8b f4		 mov	 esi, esp
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HOBBEMFI@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5MANAGER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0011b	83 c4 04	 add	 esp, 4
  0011e	3b f4		 cmp	 esi, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 165  :         puts("5. View All sales");

  00125	8b f4		 mov	 esi, esp
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KNPFBCLF@5?4?5View?5All?5sales@
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00132	83 c4 04	 add	 esp, 4
  00135	3b f4		 cmp	 esi, esp
  00137	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 166  :         puts("6. Restock cars");

  0013c	8b f4		 mov	 esi, esp
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FJGLBFI@6?4?5Restock?5cars@
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00149	83 c4 04	 add	 esp, 4
  0014c	3b f4		 cmp	 esi, esp
  0014e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 167  :         puts("======== MANAGER ========");

  00153	8b f4		 mov	 esi, esp
  00155	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HOBBEMFI@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5MANAGER?5?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00160	83 c4 04	 add	 esp, 4
  00163	3b f4		 cmp	 esi, esp
  00165	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 168  :         puts("");

  0016a	8b f4		 mov	 esi, esp
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00177	83 c4 04	 add	 esp, 4
  0017a	3b f4		 cmp	 esi, esp
  0017c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 169  :         puts("0. Exit");

  00181	8b f4		 mov	 esi, esp
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_07LFPDCHAL@0?4?5Exit@
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0018e	83 c4 04	 add	 esp, 4
  00191	3b f4		 cmp	 esi, esp
  00193	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 170  :         puts("");

  00198	8b f4		 mov	 esi, esp
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  001a5	83 c4 04	 add	 esp, 4
  001a8	3b f4		 cmp	 esi, esp
  001aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 171  : 
; 172  :         int result = scanf("%hu", &MENU_STATE);

  001af	68 00 00 00 00	 push	 OFFSET _MENU_STATE
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_03FNNLGIME@?$CFhu@
  001b9	e8 00 00 00 00	 call	 _scanf
  001be	83 c4 08	 add	 esp, 8
  001c1	89 45 f8	 mov	 DWORD PTR _result$1[ebp], eax

; 173  : 
; 174  :         
; 175  :         if (MENU_STATE < 0 || MENU_STATE > 6) {

  001c4	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _MENU_STATE
  001cb	85 c0		 test	 eax, eax
  001cd	7c 0c		 jl	 SHORT $LN11@main
  001cf	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _MENU_STATE
  001d6	83 f8 06	 cmp	 eax, 6
  001d9	7e 1c		 jle	 SHORT $LN9@main
$LN11@main:

; 176  :             puts("Invalid Input please try again.");

  001db	8b f4		 mov	 esi, esp
  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NOFOOAPJ@Invalid?5Input?5please?5try?5again?4@
  001e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  001e8	83 c4 04	 add	 esp, 4
  001eb	3b f4		 cmp	 esi, esp
  001ed	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 177  :         }

  001f2	e9 85 00 00 00	 jmp	 $LN7@main
$LN9@main:

; 178  : 
; 179  :         else {
; 180  : 
; 181  :             puts("");

  001f7	8b f4		 mov	 esi, esp
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00204	83 c4 04	 add	 esp, 4
  00207	3b f4		 cmp	 esi, esp
  00209	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 182  : 
; 183  :             switch (MENU_STATE) {

  0020e	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _MENU_STATE
  00215	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv91[ebp], eax
  0021b	83 bd 30 ff ff
	ff 06		 cmp	 DWORD PTR tv91[ebp], 6
  00222	77 41		 ja	 SHORT $LN19@main
  00224	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv91[ebp]
  0022a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN22@main[ecx*4]
$LN12@main:

; 184  : 
; 185  :                 case LIST_AVAILABLE_CARS_OPTION:
; 186  :                     listCarMenu();

  00231	e8 00 00 00 00	 call	 _listCarMenu

; 187  :                     break;

  00236	eb 44		 jmp	 SHORT $LN7@main
$LN13@main:

; 188  :                 case LIST_USER_CARS_OPTION:
; 189  :                     listUserCarsMenu();

  00238	e8 00 00 00 00	 call	 _listUserCarsMenu

; 190  :                     break;

  0023d	eb 3d		 jmp	 SHORT $LN7@main
$LN14@main:

; 191  :                 case BUY_CAR_OPTION:
; 192  :                     purchaseCar();

  0023f	e8 00 00 00 00	 call	 _purchaseCar

; 193  :                     break;

  00244	eb 36		 jmp	 SHORT $LN7@main
$LN15@main:

; 194  :                 case CHANGE_CUSTOMER_OPTION:
; 195  :                     askDetails();

  00246	e8 00 00 00 00	 call	 _askDetails

; 196  :                     break;

  0024b	eb 2f		 jmp	 SHORT $LN7@main
$LN16@main:

; 197  :                 case LIST_CAR_SALES_OPTION:
; 198  :                     listCarSales();

  0024d	e8 00 00 00 00	 call	 _listCarSales

; 199  :                     break;

  00252	eb 28		 jmp	 SHORT $LN7@main
$LN17@main:

; 200  :                 case RESTOCK_OPTION:
; 201  :                     restock();

  00254	e8 00 00 00 00	 call	 _restock

; 202  :                     break;

  00259	eb 21		 jmp	 SHORT $LN7@main
$LN18@main:

; 203  :                 case EXIT_OPTION:
; 204  :                     MENU_STATE = EXIT_OPTION;

  0025b	33 c0		 xor	 eax, eax
  0025d	66 a3 00 00 00
	00		 mov	 WORD PTR _MENU_STATE, ax

; 205  :                     break;

  00263	eb 17		 jmp	 SHORT $LN7@main
$LN19@main:

; 206  :                 default:
; 207  :                     puts("something went wrong");

  00265	8b f4		 mov	 esi, esp
  00267	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KJCEJDDI@something?5went?5wrong@
  0026c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00272	83 c4 04	 add	 esp, 4
  00275	3b f4		 cmp	 esi, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@main:

; 208  :                     break;
; 209  :             }
; 210  :         }
; 211  : 
; 212  :         // flush buffer to disallow anomalous inputs
; 213  :         while ((result = fgetc(stdin)) != '\n' && result != EOF); 

  0027c	8b f4		 mov	 esi, esp
  0027e	6a 00		 push	 0
  00280	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00286	83 c4 04	 add	 esp, 4
  00289	3b f4		 cmp	 esi, esp
  0028b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00290	8b f4		 mov	 esi, esp
  00292	50		 push	 eax
  00293	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00299	83 c4 04	 add	 esp, 4
  0029c	3b f4		 cmp	 esi, esp
  0029e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a3	89 45 f8	 mov	 DWORD PTR _result$1[ebp], eax
  002a6	83 7d f8 0a	 cmp	 DWORD PTR _result$1[ebp], 10 ; 0000000aH
  002aa	74 08		 je	 SHORT $LN8@main
  002ac	83 7d f8 ff	 cmp	 DWORD PTR _result$1[ebp], -1
  002b0	74 02		 je	 SHORT $LN8@main
  002b2	eb c8		 jmp	 SHORT $LN7@main
$LN8@main:

; 214  : 
; 215  :         if (MENU_STATE != EXIT_OPTION) {

  002b4	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _MENU_STATE
  002bb	85 c0		 test	 eax, eax
  002bd	74 48		 je	 SHORT $LN20@main

; 216  : 
; 217  :             MENU_STATE = MENU_HOME;

  002bf	b8 63 00 00 00	 mov	 eax, 99			; 00000063H
  002c4	66 a3 00 00 00
	00		 mov	 WORD PTR _MENU_STATE, ax

; 218  : 
; 219  :             puts("");

  002ca	8b f4		 mov	 esi, esp
  002cc	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  002d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  002d7	83 c4 04	 add	 esp, 4
  002da	3b f4		 cmp	 esi, esp
  002dc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 220  :             puts("Press ENTER to continue using the program.");

  002e1	8b f4		 mov	 esi, esp
  002e3	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@IBPFPHKL@Press?5ENTER?5to?5continue?5using?5t@
  002e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  002ee	83 c4 04	 add	 esp, 4
  002f1	3b f4		 cmp	 esi, esp
  002f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 221  : 
; 222  :             getchar();

  002f8	8b f4		 mov	 esi, esp
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getchar
  00300	3b f4		 cmp	 esi, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN20@main:

; 223  :         }
; 224  : 
; 225  :         system("cls");

  00307	8b f4		 mov	 esi, esp
  00309	68 00 00 00 00	 push	 OFFSET ??_C@_03LCPHGAHP@cls@
  0030e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  00314	83 c4 04	 add	 esp, 4
  00317	3b f4		 cmp	 esi, esp
  00319	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 226  : 
; 227  :     } while (MENU_STATE != EXIT_OPTION);

  0031e	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _MENU_STATE
  00325	85 c0		 test	 eax, eax
  00327	0f 85 29 fd ff
	ff		 jne	 $LN4@main

; 228  :     
; 229  :     saveData();

  0032d	e8 00 00 00 00	 call	 _saveData

; 230  : 
; 231  :     freePurchasesMemory();

  00332	e8 00 00 00 00	 call	 _freePurchasesMemory

; 232  :     
; 233  :     puts("Thanks for using our shop!");

  00337	8b f4		 mov	 esi, esp
  00339	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LNFAHOBG@Thanks?5for?5using?5our?5shop?$CB@
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00344	83 c4 04	 add	 esp, 4
  00347	3b f4		 cmp	 esi, esp
  00349	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 234  : 
; 235  :     return 0;

  0034e	33 c0		 xor	 eax, eax

; 236  : }

  00350	5f		 pop	 edi
  00351	5e		 pop	 esi
  00352	5b		 pop	 ebx
  00353	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00359	3b ec		 cmp	 ebp, esp
  0035b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00360	8b e5		 mov	 esp, ebp
  00362	5d		 pop	 ebp
  00363	c3		 ret	 0
$LN22@main:
  00364	00 00 00 00	 DD	 $LN18@main
  00368	00 00 00 00	 DD	 $LN12@main
  0036c	00 00 00 00	 DD	 $LN13@main
  00370	00 00 00 00	 DD	 $LN14@main
  00374	00 00 00 00	 DD	 $LN15@main
  00378	00 00 00 00	 DD	 $LN16@main
  0037c	00 00 00 00	 DD	 $LN17@main
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _getStringFromInput
_TEXT	SEGMENT
_result$ = -8						; size = 4
_output$ = 8						; size = 4
_message$ = 12						; size = 4
_getStringFromInput PROC				; COMDAT

; 594  : void getStringFromInput(unsigned char* output, char* message) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 595  : 
; 596  :     int result = 0;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@getStringF:

; 597  : 
; 598  :     while (result != 1) {

  0002f	83 7d f8 01	 cmp	 DWORD PTR _result$[ebp], 1
  00033	74 6a		 je	 SHORT $LN1@getStringF

; 599  : 
; 600  :         puts(message);

  00035	8b f4		 mov	 esi, esp
  00037	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00041	83 c4 04	 add	 esp, 4
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 601  : 
; 602  :         result = scanf("\n%[^\n]s", output);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_07HIDJNEEJ@?6?$CF?$FL?$FO?6?$FNs@
  00054	e8 00 00 00 00	 call	 _scanf
  00059	83 c4 08	 add	 esp, 8
  0005c	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax

; 603  : 
; 604  :         if (result != 1) {

  0005f	83 7d f8 01	 cmp	 DWORD PTR _result$[ebp], 1
  00063	74 38		 je	 SHORT $LN6@getStringF
$LN4@getStringF:

; 605  :             // flush buffer to disallow anomalous inputs
; 606  :             while ((result = fgetc(stdin)) != '\n' && result != EOF);

  00065	8b f4		 mov	 esi, esp
  00067	6a 00		 push	 0
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0006f	83 c4 04	 add	 esp, 4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b f4		 mov	 esi, esp
  0007b	50		 push	 eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00082	83 c4 04	 add	 esp, 4
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax
  0008f	83 7d f8 0a	 cmp	 DWORD PTR _result$[ebp], 10 ; 0000000aH
  00093	74 08		 je	 SHORT $LN6@getStringF
  00095	83 7d f8 ff	 cmp	 DWORD PTR _result$[ebp], -1
  00099	74 02		 je	 SHORT $LN6@getStringF
  0009b	eb c8		 jmp	 SHORT $LN4@getStringF
$LN6@getStringF:

; 607  :         }
; 608  : 
; 609  :     }

  0009d	eb 90		 jmp	 SHORT $LN2@getStringF
$LN1@getStringF:

; 610  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_getStringFromInput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _getUnsignedShortFromInput
_TEXT	SEGMENT
_result$ = -8						; size = 4
_output$ = 8						; size = 4
_message$ = 12						; size = 4
_getUnsignedShortFromInput PROC				; COMDAT

; 576  : void getUnsignedShortFromInput(unsigned short* output, char* message) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 577  :     
; 578  :     int result = 0;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@getUnsigne:

; 579  : 
; 580  :     while (result != 1) {

  0002f	83 7d f8 01	 cmp	 DWORD PTR _result$[ebp], 1
  00033	74 6a		 je	 SHORT $LN1@getUnsigne

; 581  : 
; 582  :         puts(message);

  00035	8b f4		 mov	 esi, esp
  00037	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00041	83 c4 04	 add	 esp, 4
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 583  : 
; 584  :         result = scanf("%hu", output);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_03FNNLGIME@?$CFhu@
  00054	e8 00 00 00 00	 call	 _scanf
  00059	83 c4 08	 add	 esp, 8
  0005c	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax

; 585  : 
; 586  :         if (result != 1) {

  0005f	83 7d f8 01	 cmp	 DWORD PTR _result$[ebp], 1
  00063	74 38		 je	 SHORT $LN6@getUnsigne
$LN4@getUnsigne:

; 587  :             // flush buffer to disallow anomalous inputs
; 588  :             while ((result = fgetc(stdin)) != '\n' && result != EOF);

  00065	8b f4		 mov	 esi, esp
  00067	6a 00		 push	 0
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0006f	83 c4 04	 add	 esp, 4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b f4		 mov	 esi, esp
  0007b	50		 push	 eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00082	83 c4 04	 add	 esp, 4
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax
  0008f	83 7d f8 0a	 cmp	 DWORD PTR _result$[ebp], 10 ; 0000000aH
  00093	74 08		 je	 SHORT $LN6@getUnsigne
  00095	83 7d f8 ff	 cmp	 DWORD PTR _result$[ebp], -1
  00099	74 02		 je	 SHORT $LN6@getUnsigne
  0009b	eb c8		 jmp	 SHORT $LN4@getUnsigne
$LN6@getUnsigne:

; 589  :         }
; 590  : 
; 591  :     }

  0009d	eb 90		 jmp	 SHORT $LN2@getUnsigne
$LN1@getUnsigne:

; 592  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_getUnsignedShortFromInput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _freePurchasesMemory
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_freePurchasesMemory PROC				; COMDAT

; 569  : void freePurchasesMemory(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 570  :     for (int i = 0; i < vector_total(&purchases); i++) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@freePurcha
$LN2@freePurcha:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@freePurcha:
  0003a	68 00 00 00 00	 push	 OFFSET _purchases
  0003f	e8 00 00 00 00	 call	 _vector_total
  00044	83 c4 04	 add	 esp, 4
  00047	39 45 f8	 cmp	 DWORD PTR _i$1[ebp], eax
  0004a	7d 26		 jge	 SHORT $LN3@freePurcha

; 571  :         free(vector_get(&purchases, i));

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0004f	50		 push	 eax
  00050	68 00 00 00 00	 push	 OFFSET _purchases
  00055	e8 00 00 00 00	 call	 _vector_get
  0005a	83 c4 08	 add	 esp, 8
  0005d	8b f4		 mov	 esi, esp
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00066	83 c4 04	 add	 esp, 4
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 572  :     }

  00070	eb bf		 jmp	 SHORT $LN2@freePurcha
$LN3@freePurcha:

; 573  :     vector_free(&purchases);

  00072	68 00 00 00 00	 push	 OFFSET _purchases
  00077	e8 00 00 00 00	 call	 _vector_free
  0007c	83 c4 04	 add	 esp, 4

; 574  : }

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_freePurchasesMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _restock
_TEXT	SEGMENT
_restock PROC						; COMDAT

; 534  : void restock(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 535  :     puts("All cars have been restocked");

  00028	8b f4		 mov	 esi, esp
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PPHLOIOH@All?5cars?5have?5been?5restocked@
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00035	83 c4 04	 add	 esp, 4
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 536  :     shopStock[0] = 10;

  0003f	b8 04 00 00 00	 mov	 eax, 4
  00044	6b c8 00	 imul	 ecx, eax, 0
  00047	c7 81 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _shopStock[ecx], 10 ; 0000000aH

; 537  :     shopStock[1] = 9;

  00051	b8 04 00 00 00	 mov	 eax, 4
  00056	c1 e0 00	 shl	 eax, 0
  00059	c7 80 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR _shopStock[eax], 9

; 538  :     shopStock[2] = 8;

  00063	b8 04 00 00 00	 mov	 eax, 4
  00068	d1 e0		 shl	 eax, 1
  0006a	c7 80 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR _shopStock[eax], 8

; 539  :     shopStock[3] = 7;

  00074	b8 04 00 00 00	 mov	 eax, 4
  00079	6b c8 03	 imul	 ecx, eax, 3
  0007c	c7 81 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR _shopStock[ecx], 7

; 540  :     shopStock[4] = 6;

  00086	b8 04 00 00 00	 mov	 eax, 4
  0008b	c1 e0 02	 shl	 eax, 2
  0008e	c7 80 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR _shopStock[eax], 6

; 541  :     shopStock[5] = 5;

  00098	b8 04 00 00 00	 mov	 eax, 4
  0009d	6b c8 05	 imul	 ecx, eax, 5
  000a0	c7 81 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR _shopStock[ecx], 5

; 542  : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_restock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _listCarSales
_TEXT	SEGMENT
tv222 = -488						; size = 4
_c$1 = -285						; size = 1
_i$2 = -276						; size = 4
_sortedcar$3 = -264					; size = 4
_index$4 = -252						; size = 4
_check$5 = -240						; size = 4
_indexpos$6 = -228					; size = 4
_index$7 = -216						; size = 4
_carbuyer$8 = -204					; size = 4
_order$9 = -192						; size = 4
_i$10 = -180						; size = 4
_carBuyers$ = -168					; size = 72
_carTotals$ = -88					; size = 48
_sortedResults$ = -32					; size = 24
__$ArrayPad$ = -4					; size = 4
_listCarSales PROC					; COMDAT

; 388  : void listCarSales(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 01 00
	00		 sub	 esp, 488		; 000001e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-488]
  00012	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 389  : 
; 390  : 
; 391  :     if (vector_total(&purchases) == 0) {

  00032	68 00 00 00 00	 push	 OFFSET _purchases
  00037	e8 00 00 00 00	 call	 _vector_total
  0003c	83 c4 04	 add	 esp, 4
  0003f	85 c0		 test	 eax, eax
  00041	75 12		 jne	 SHORT $LN19@listCarSal

; 392  :         printf("No sales yet.");

  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JEIEPEKG@No?5sales?5yet?4@
  00048	e8 00 00 00 00	 call	 _printf
  0004d	83 c4 04	 add	 esp, 4

; 393  :         return;

  00050	e9 35 04 00 00	 jmp	 $LN1@listCarSal
$LN19@listCarSal:

; 394  :     }
; 395  : 
; 396  :     int sortedResults[MAXIMUM_CARS]; // holds the cars with the highest total sum in descending order
; 397  :     int carTotals[MAXIMUM_CARS][2] = { 0 }; // holds the total amount of cars purchasesd for every model and price paid

  00055	6a 30		 push	 48			; 00000030H
  00057	6a 00		 push	 0
  00059	8d 45 a8	 lea	 eax, DWORD PTR _carTotals$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _memset
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 398  :     vector carBuyers[MAXIMUM_CARS] = { NULL }; // holds a dynamic char array list of buyers;

  00065	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _carBuyers$[ebp], 0
  0006f	6a 44		 push	 68			; 00000044H
  00071	6a 00		 push	 0
  00073	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _carBuyers$[ebp+4]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _memset
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 399  : 
; 400  : 
; 401  :     // adding up values
; 402  : 
; 403  :     for (int i = 0; i < vector_total(&purchases); i++) {

  00082	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$10[ebp], 0
  0008c	eb 0f		 jmp	 SHORT $LN4@listCarSal
$LN2@listCarSal:
  0008e	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _i$10[ebp]
  00094	83 c0 01	 add	 eax, 1
  00097	89 85 4c ff ff
	ff		 mov	 DWORD PTR _i$10[ebp], eax
$LN4@listCarSal:
  0009d	68 00 00 00 00	 push	 OFFSET _purchases
  000a2	e8 00 00 00 00	 call	 _vector_total
  000a7	83 c4 04	 add	 esp, 4
  000aa	39 85 4c ff ff
	ff		 cmp	 DWORD PTR _i$10[ebp], eax
  000b0	0f 8d e9 00 00
	00		 jge	 $LN3@listCarSal

; 404  : 
; 405  :         struct purchase* order = vector_get(&purchases, i);   

  000b6	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _i$10[ebp]
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET _purchases
  000c2	e8 00 00 00 00	 call	 _vector_get
  000c7	83 c4 08	 add	 esp, 8
  000ca	89 85 40 ff ff
	ff		 mov	 DWORD PTR _order$9[ebp], eax

; 406  :         carTotals[order->carnumber][0] = carTotals[order->carnumber][0] + order->price;

  000d0	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _order$9[ebp]
  000d6	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  000da	8d 54 cd a8	 lea	 edx, DWORD PTR _carTotals$[ebp+ecx*8]
  000de	b8 04 00 00 00	 mov	 eax, 4
  000e3	6b c8 00	 imul	 ecx, eax, 0
  000e6	8b 14 0a	 mov	 edx, DWORD PTR [edx+ecx]
  000e9	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _order$9[ebp]
  000ef	03 50 08	 add	 edx, DWORD PTR [eax+8]
  000f2	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _order$9[ebp]
  000f8	0f b7 41 0c	 movzx	 eax, WORD PTR [ecx+12]
  000fc	8d 4c c5 a8	 lea	 ecx, DWORD PTR _carTotals$[ebp+eax*8]
  00100	b8 04 00 00 00	 mov	 eax, 4
  00105	6b c0 00	 imul	 eax, eax, 0
  00108	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 407  :         carTotals[order->carnumber][1]++;

  0010b	b8 04 00 00 00	 mov	 eax, 4
  00110	c1 e0 00	 shl	 eax, 0
  00113	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _order$9[ebp]
  00119	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  0011d	8d 4c d5 a8	 lea	 ecx, DWORD PTR _carTotals$[ebp+edx*8]
  00121	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00124	83 c2 01	 add	 edx, 1
  00127	b8 04 00 00 00	 mov	 eax, 4
  0012c	c1 e0 00	 shl	 eax, 0
  0012f	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _order$9[ebp]
  00135	0f b7 49 0c	 movzx	 ecx, WORD PTR [ecx+12]
  00139	8d 4c cd a8	 lea	 ecx, DWORD PTR _carTotals$[ebp+ecx*8]
  0013d	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 408  : 
; 409  :         vector * carbuyer = &carBuyers[order->carnumber];

  00140	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _order$9[ebp]
  00146	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  0014a	6b d1 0c	 imul	 edx, ecx, 12
  0014d	8d 84 15 58 ff
	ff ff		 lea	 eax, DWORD PTR _carBuyers$[ebp+edx]
  00154	89 85 34 ff ff
	ff		 mov	 DWORD PTR _carbuyer$8[ebp], eax

; 410  : 
; 411  :         if (carbuyer->total== 0 && carbuyer->capacity == 0) {

  0015a	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _carbuyer$8[ebp]
  00160	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00164	75 1b		 jne	 SHORT $LN20@listCarSal
  00166	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _carbuyer$8[ebp]
  0016c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00170	75 0f		 jne	 SHORT $LN20@listCarSal

; 412  :             vector_init(carbuyer);

  00172	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _carbuyer$8[ebp]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 _vector_init
  0017e	83 c4 04	 add	 esp, 4
$LN20@listCarSal:

; 413  :         }
; 414  : 
; 415  :         vector_add(carbuyer, order->name);

  00181	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _order$9[ebp]
  00187	83 c0 10	 add	 eax, 16			; 00000010H
  0018a	50		 push	 eax
  0018b	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _carbuyer$8[ebp]
  00191	51		 push	 ecx
  00192	e8 00 00 00 00	 call	 _vector_add
  00197	83 c4 08	 add	 esp, 8

; 416  :     }

  0019a	e9 ef fe ff ff	 jmp	 $LN2@listCarSal
$LN3@listCarSal:

; 417  : 
; 418  : 
; 419  :     // sorting values (see getSortedCarStocksArray method for documentation)
; 420  : 
; 421  :     for (int index = 0; index < MAXIMUM_CARS; index++) {

  0019f	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _index$7[ebp], 0
  001a9	eb 0f		 jmp	 SHORT $LN7@listCarSal
$LN5@listCarSal:
  001ab	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _index$7[ebp]
  001b1	83 c0 01	 add	 eax, 1
  001b4	89 85 28 ff ff
	ff		 mov	 DWORD PTR _index$7[ebp], eax
$LN7@listCarSal:
  001ba	83 bd 28 ff ff
	ff 06		 cmp	 DWORD PTR _index$7[ebp], 6
  001c1	0f 8d b9 00 00
	00		 jge	 $LN6@listCarSal

; 422  : 
; 423  :         int indexpos = 0;

  001c7	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _indexpos$6[ebp], 0

; 424  : 
; 425  :         for (int check = 0; check < MAXIMUM_CARS; check++) {

  001d1	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _check$5[ebp], 0
  001db	eb 0f		 jmp	 SHORT $LN10@listCarSal
$LN8@listCarSal:
  001dd	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _check$5[ebp]
  001e3	83 c0 01	 add	 eax, 1
  001e6	89 85 10 ff ff
	ff		 mov	 DWORD PTR _check$5[ebp], eax
$LN10@listCarSal:
  001ec	83 bd 10 ff ff
	ff 06		 cmp	 DWORD PTR _check$5[ebp], 6
  001f3	7d 4b		 jge	 SHORT $LN11@listCarSal

; 426  : 
; 427  :             if (index != check && carTotals[index][0] <= carTotals[check][0]) {

  001f5	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _index$7[ebp]
  001fb	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _check$5[ebp]
  00201	74 3b		 je	 SHORT $LN21@listCarSal
  00203	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _index$7[ebp]
  00209	8d 4c c5 a8	 lea	 ecx, DWORD PTR _carTotals$[ebp+eax*8]
  0020d	ba 04 00 00 00	 mov	 edx, 4
  00212	6b c2 00	 imul	 eax, edx, 0
  00215	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _check$5[ebp]
  0021b	8d 54 d5 a8	 lea	 edx, DWORD PTR _carTotals$[ebp+edx*8]
  0021f	be 04 00 00 00	 mov	 esi, 4
  00224	6b f6 00	 imul	 esi, esi, 0
  00227	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0022a	3b 04 32	 cmp	 eax, DWORD PTR [edx+esi]
  0022d	7f 0f		 jg	 SHORT $LN21@listCarSal

; 428  :                 indexpos++;

  0022f	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _indexpos$6[ebp]
  00235	83 c0 01	 add	 eax, 1
  00238	89 85 1c ff ff
	ff		 mov	 DWORD PTR _indexpos$6[ebp], eax
$LN21@listCarSal:

; 429  :             }
; 430  :         }

  0023e	eb 9d		 jmp	 SHORT $LN8@listCarSal
$LN11@listCarSal:

; 431  : 
; 432  :         while (sortedResults[indexpos] >= 0 && sortedResults[indexpos] < MAXIMUM_CARS) { //

  00240	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _indexpos$6[ebp]
  00246	83 7c 85 e0 00	 cmp	 DWORD PTR _sortedResults$[ebp+eax*4], 0
  0024b	7c 1e		 jl	 SHORT $LN12@listCarSal
  0024d	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _indexpos$6[ebp]
  00253	83 7c 85 e0 06	 cmp	 DWORD PTR _sortedResults$[ebp+eax*4], 6
  00258	7d 11		 jge	 SHORT $LN12@listCarSal

; 433  :             indexpos--;

  0025a	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _indexpos$6[ebp]
  00260	83 e8 01	 sub	 eax, 1
  00263	89 85 1c ff ff
	ff		 mov	 DWORD PTR _indexpos$6[ebp], eax

; 434  :         }

  00269	eb d5		 jmp	 SHORT $LN11@listCarSal
$LN12@listCarSal:

; 435  : 
; 436  :         sortedResults[indexpos] = index;

  0026b	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _indexpos$6[ebp]
  00271	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _index$7[ebp]
  00277	89 4c 85 e0	 mov	 DWORD PTR _sortedResults$[ebp+eax*4], ecx

; 437  : 
; 438  :     }

  0027b	e9 2b ff ff ff	 jmp	 $LN5@listCarSal
$LN6@listCarSal:

; 439  : 
; 440  :     // printing
; 441  : 
; 442  :     puts("==================================");

  00280	8b f4		 mov	 esi, esp
  00282	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HOICFALD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0028d	83 c4 04	 add	 esp, 4
  00290	3b f4		 cmp	 esi, esp
  00292	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 443  : 
; 444  :     for (int index = 0; index < MAXIMUM_CARS; index++) {

  00297	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _index$4[ebp], 0
  002a1	eb 0f		 jmp	 SHORT $LN15@listCarSal
$LN13@listCarSal:
  002a3	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _index$4[ebp]
  002a9	83 c0 01	 add	 eax, 1
  002ac	89 85 04 ff ff
	ff		 mov	 DWORD PTR _index$4[ebp], eax
$LN15@listCarSal:
  002b2	83 bd 04 ff ff
	ff 06		 cmp	 DWORD PTR _index$4[ebp], 6
  002b9	0f 8d b4 01 00
	00		 jge	 $LN14@listCarSal

; 445  : 
; 446  :         int sortedcar = sortedResults[index];

  002bf	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _index$4[ebp]
  002c5	8b 4c 85 e0	 mov	 ecx, DWORD PTR _sortedResults$[ebp+eax*4]
  002c9	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _sortedcar$3[ebp], ecx

; 447  : 
; 448  :         if (carTotals[sortedcar][0] != 0) { // checking if there was a sale for that car

  002cf	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _sortedcar$3[ebp]
  002d5	8d 4c c5 a8	 lea	 ecx, DWORD PTR _carTotals$[ebp+eax*8]
  002d9	ba 04 00 00 00	 mov	 edx, 4
  002de	6b c2 00	 imul	 eax, edx, 0
  002e1	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  002e5	0f 84 6c 01 00
	00		 je	 $LN22@listCarSal

; 449  : 
; 450  :             printf("   Car: %s \n", shopCars[sortedcar]);

  002eb	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _sortedcar$3[ebp]
  002f1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _shopCars[eax*4]
  002f8	51		 push	 ecx
  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LEAOOHEI@?5?5?5Car?3?5?$CFs?5?6@
  002fe	e8 00 00 00 00	 call	 _printf
  00303	83 c4 08	 add	 esp, 8

; 451  :             puts("");

  00306	8b f4		 mov	 esi, esp
  00308	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0030d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00313	83 c4 04	 add	 esp, 4
  00316	3b f4		 cmp	 esi, esp
  00318	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 452  :             printf("       - Total Sales: %d pounds\n" , carTotals[sortedcar][0]);

  0031d	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _sortedcar$3[ebp]
  00323	8d 4c c5 a8	 lea	 ecx, DWORD PTR _carTotals$[ebp+eax*8]
  00327	ba 04 00 00 00	 mov	 edx, 4
  0032c	6b c2 00	 imul	 eax, edx, 0
  0032f	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  00332	51		 push	 ecx
  00333	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@NFHCDHOI@?5?5?5?5?5?5?5?9?5Total?5Sales?3?5?$CFd?5pounds@
  00338	e8 00 00 00 00	 call	 _printf
  0033d	83 c4 08	 add	 esp, 8

; 453  :             printf("       - Total Amount of cars sold: %d \n" , carTotals[sortedcar][1]);

  00340	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _sortedcar$3[ebp]
  00346	8d 4c c5 a8	 lea	 ecx, DWORD PTR _carTotals$[ebp+eax*8]
  0034a	ba 04 00 00 00	 mov	 edx, 4
  0034f	c1 e2 00	 shl	 edx, 0
  00352	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00355	50		 push	 eax
  00356	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GIEJKJJM@?5?5?5?5?5?5?5?9?5Total?5Amount?5of?5cars?5s@
  0035b	e8 00 00 00 00	 call	 _printf
  00360	83 c4 08	 add	 esp, 8

; 454  :             printf("       - Buyers: ");

  00363	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GDHIJBBD@?5?5?5?5?5?5?5?9?5Buyers?3?5@
  00368	e8 00 00 00 00	 call	 _printf
  0036d	83 c4 04	 add	 esp, 4

; 455  : 
; 456  :             //printing vector values
; 457  :             for (int i = 0; i < vector_total(&carBuyers[sortedcar]); i++) {

  00370	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$2[ebp], 0
  0037a	eb 0f		 jmp	 SHORT $LN18@listCarSal
$LN16@listCarSal:
  0037c	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _i$2[ebp]
  00382	83 c0 01	 add	 eax, 1
  00385	89 85 ec fe ff
	ff		 mov	 DWORD PTR _i$2[ebp], eax
$LN18@listCarSal:
  0038b	6b 85 f8 fe ff
	ff 0c		 imul	 eax, DWORD PTR _sortedcar$3[ebp], 12
  00392	8d 8c 05 58 ff
	ff ff		 lea	 ecx, DWORD PTR _carBuyers$[ebp+eax]
  00399	51		 push	 ecx
  0039a	e8 00 00 00 00	 call	 _vector_total
  0039f	83 c4 04	 add	 esp, 4
  003a2	39 85 ec fe ff
	ff		 cmp	 DWORD PTR _i$2[ebp], eax
  003a8	7d 7f		 jge	 SHORT $LN17@listCarSal

; 458  : 
; 459  :                 char c = (i + 1) == vector_total(&carBuyers[sortedcar]) ? ' ' : ','; // this is to check if we need to add a comma or not at the end

  003aa	8b b5 ec fe ff
	ff		 mov	 esi, DWORD PTR _i$2[ebp]
  003b0	83 c6 01	 add	 esi, 1
  003b3	6b 85 f8 fe ff
	ff 0c		 imul	 eax, DWORD PTR _sortedcar$3[ebp], 12
  003ba	8d 8c 05 58 ff
	ff ff		 lea	 ecx, DWORD PTR _carBuyers$[ebp+eax]
  003c1	51		 push	 ecx
  003c2	e8 00 00 00 00	 call	 _vector_total
  003c7	83 c4 04	 add	 esp, 4
  003ca	3b f0		 cmp	 esi, eax
  003cc	75 0c		 jne	 SHORT $LN24@listCarSal
  003ce	c7 85 18 fe ff
	ff 20 00 00 00	 mov	 DWORD PTR tv222[ebp], 32 ; 00000020H
  003d8	eb 0a		 jmp	 SHORT $LN25@listCarSal
$LN24@listCarSal:
  003da	c7 85 18 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv222[ebp], 44 ; 0000002cH
$LN25@listCarSal:
  003e4	8a 95 18 fe ff
	ff		 mov	 dl, BYTE PTR tv222[ebp]
  003ea	88 95 e3 fe ff
	ff		 mov	 BYTE PTR _c$1[ebp], dl

; 460  :  
; 461  :                 printf("%s%c", (char *)vector_get(&carBuyers[sortedcar] , i) ,c);

  003f0	0f be 85 e3 fe
	ff ff		 movsx	 eax, BYTE PTR _c$1[ebp]
  003f7	50		 push	 eax
  003f8	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _i$2[ebp]
  003fe	51		 push	 ecx
  003ff	6b 95 f8 fe ff
	ff 0c		 imul	 edx, DWORD PTR _sortedcar$3[ebp], 12
  00406	8d 84 15 58 ff
	ff ff		 lea	 eax, DWORD PTR _carBuyers$[ebp+edx]
  0040d	50		 push	 eax
  0040e	e8 00 00 00 00	 call	 _vector_get
  00413	83 c4 08	 add	 esp, 8
  00416	50		 push	 eax
  00417	68 00 00 00 00	 push	 OFFSET ??_C@_04DJCABLIL@?$CFs?$CFc@
  0041c	e8 00 00 00 00	 call	 _printf
  00421	83 c4 0c	 add	 esp, 12			; 0000000cH

; 462  :             }

  00424	e9 53 ff ff ff	 jmp	 $LN16@listCarSal
$LN17@listCarSal:

; 463  :             puts("");

  00429	8b f4		 mov	 esi, esp
  0042b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00430	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00436	83 c4 04	 add	 esp, 4
  00439	3b f4		 cmp	 esi, esp
  0043b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 464  :             puts("");

  00440	8b f4		 mov	 esi, esp
  00442	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00447	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0044d	83 c4 04	 add	 esp, 4
  00450	3b f4		 cmp	 esi, esp
  00452	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN22@listCarSal:

; 465  :         }
; 466  :         vector_free(&carBuyers[sortedcar]);

  00457	6b 85 f8 fe ff
	ff 0c		 imul	 eax, DWORD PTR _sortedcar$3[ebp], 12
  0045e	8d 8c 05 58 ff
	ff ff		 lea	 ecx, DWORD PTR _carBuyers$[ebp+eax]
  00465	51		 push	 ecx
  00466	e8 00 00 00 00	 call	 _vector_free
  0046b	83 c4 04	 add	 esp, 4

; 467  :     }

  0046e	e9 30 fe ff ff	 jmp	 $LN13@listCarSal
$LN14@listCarSal:

; 468  : 
; 469  :     puts("==================================");

  00473	8b f4		 mov	 esi, esp
  00475	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HOICFALD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  0047a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00480	83 c4 04	 add	 esp, 4
  00483	3b f4		 cmp	 esi, esp
  00485	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@listCarSal:

; 470  : 
; 471  : }

  0048a	52		 push	 edx
  0048b	8b cd		 mov	 ecx, ebp
  0048d	50		 push	 eax
  0048e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN30@listCarSal
  00494	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00499	58		 pop	 eax
  0049a	5a		 pop	 edx
  0049b	5f		 pop	 edi
  0049c	5e		 pop	 esi
  0049d	5b		 pop	 ebx
  0049e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004a1	33 cd		 xor	 ecx, ebp
  004a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004a8	81 c4 e8 01 00
	00		 add	 esp, 488		; 000001e8H
  004ae	3b ec		 cmp	 ebp, esp
  004b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004b5	8b e5		 mov	 esp, ebp
  004b7	5d		 pop	 ebp
  004b8	c3		 ret	 0
  004b9	0f 1f 00	 npad	 3
$LN30@listCarSal:
  004bc	03 00 00 00	 DD	 3
  004c0	00 00 00 00	 DD	 $LN29@listCarSal
$LN29@listCarSal:
  004c4	e0 ff ff ff	 DD	 -32			; ffffffe0H
  004c8	18 00 00 00	 DD	 24			; 00000018H
  004cc	00 00 00 00	 DD	 $LN26@listCarSal
  004d0	a8 ff ff ff	 DD	 -88			; ffffffa8H
  004d4	30 00 00 00	 DD	 48			; 00000030H
  004d8	00 00 00 00	 DD	 $LN27@listCarSal
  004dc	58 ff ff ff	 DD	 -168			; ffffff58H
  004e0	48 00 00 00	 DD	 72			; 00000048H
  004e4	00 00 00 00	 DD	 $LN28@listCarSal
$LN28@listCarSal:
  004e8	63		 DB	 99			; 00000063H
  004e9	61		 DB	 97			; 00000061H
  004ea	72		 DB	 114			; 00000072H
  004eb	42		 DB	 66			; 00000042H
  004ec	75		 DB	 117			; 00000075H
  004ed	79		 DB	 121			; 00000079H
  004ee	65		 DB	 101			; 00000065H
  004ef	72		 DB	 114			; 00000072H
  004f0	73		 DB	 115			; 00000073H
  004f1	00		 DB	 0
$LN27@listCarSal:
  004f2	63		 DB	 99			; 00000063H
  004f3	61		 DB	 97			; 00000061H
  004f4	72		 DB	 114			; 00000072H
  004f5	54		 DB	 84			; 00000054H
  004f6	6f		 DB	 111			; 0000006fH
  004f7	74		 DB	 116			; 00000074H
  004f8	61		 DB	 97			; 00000061H
  004f9	6c		 DB	 108			; 0000006cH
  004fa	73		 DB	 115			; 00000073H
  004fb	00		 DB	 0
$LN26@listCarSal:
  004fc	73		 DB	 115			; 00000073H
  004fd	6f		 DB	 111			; 0000006fH
  004fe	72		 DB	 114			; 00000072H
  004ff	74		 DB	 116			; 00000074H
  00500	65		 DB	 101			; 00000065H
  00501	64		 DB	 100			; 00000064H
  00502	52		 DB	 82			; 00000052H
  00503	65		 DB	 101			; 00000065H
  00504	73		 DB	 115			; 00000073H
  00505	75		 DB	 117			; 00000075H
  00506	6c		 DB	 108			; 0000006cH
  00507	74		 DB	 116			; 00000074H
  00508	73		 DB	 115			; 00000073H
  00509	00		 DB	 0
_listCarSales ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _listUserCarsMenu
_TEXT	SEGMENT
_order$1 = -32						; size = 4
_i$2 = -20						; size = 4
_totalprice$ = -8					; size = 4
_listUserCarsMenu PROC					; COMDAT

; 361  : void listUserCarsMenu(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 362  : 
; 363  :     if (!hasCarsPurchased()) {

  00028	e8 00 00 00 00	 call	 _hasCarsPurchased
  0002d	85 c0		 test	 eax, eax
  0002f	75 1c		 jne	 SHORT $LN5@listUserCa

; 364  :   
; 365  :         puts("Currently you have no cars");

  00031	8b f4		 mov	 esi, esp
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PCAFJADG@Currently?5you?5have?5no?5cars@
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0003e	83 c4 04	 add	 esp, 4
  00041	3b f4		 cmp	 esi, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 366  :         return;

  00048	e9 e4 00 00 00	 jmp	 $LN1@listUserCa
$LN5@listUserCa:

; 367  :     }
; 368  : 
; 369  :     puts("==================================");

  0004d	8b f4		 mov	 esi, esp
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HOICFALD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0005a	83 c4 04	 add	 esp, 4
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 370  :     puts("Here is the list of cars you currently posess: ");

  00064	8b f4		 mov	 esi, esp
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HPABEOGE@Here?5is?5the?5list?5of?5cars?5you?5cu@
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00071	83 c4 04	 add	 esp, 4
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 371  : 
; 372  :     int totalprice = 0;

  0007b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _totalprice$[ebp], 0

; 373  :     for (int i = 0; i < purchases.total; i++) {

  00082	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00089	eb 09		 jmp	 SHORT $LN4@listUserCa
$LN2@listUserCa:
  0008b	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 ec	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@listUserCa:
  00094	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  00097	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR _purchases+8
  0009d	7d 6a		 jge	 SHORT $LN3@listUserCa

; 374  : 
; 375  :         struct purchase* order = vector_get(&purchases, i);

  0009f	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  000a2	50		 push	 eax
  000a3	68 00 00 00 00	 push	 OFFSET _purchases
  000a8	e8 00 00 00 00	 call	 _vector_get
  000ad	83 c4 08	 add	 esp, 8
  000b0	89 45 e0	 mov	 DWORD PTR _order$1[ebp], eax

; 376  : 
; 377  :         if (strcmp(order->name, name) == 0) {

  000b3	68 00 00 00 00	 push	 OFFSET _name
  000b8	8b 45 e0	 mov	 eax, DWORD PTR _order$1[ebp]
  000bb	83 c0 10	 add	 eax, 16			; 00000010H
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _strcmp
  000c4	83 c4 08	 add	 esp, 8
  000c7	85 c0		 test	 eax, eax
  000c9	75 30		 jne	 SHORT $LN6@listUserCa

; 378  :             printf("           - %s   \n", shopCars[order->carnumber]);

  000cb	8b 45 e0	 mov	 eax, DWORD PTR _order$1[ebp]
  000ce	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  000d2	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _shopCars[ecx*4]
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LGANKJDA@?5?5?5?5?5?5?5?5?5?5?5?9?5?$CFs?5?5?5?6@
  000df	e8 00 00 00 00	 call	 _printf
  000e4	83 c4 08	 add	 esp, 8

; 379  :             printf("                 %d pounds\n", order->price);

  000e7	8b 45 e0	 mov	 eax, DWORD PTR _order$1[ebp]
  000ea	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ed	51		 push	 ecx
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IGGDGEEC@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?5pounds?6@
  000f3	e8 00 00 00 00	 call	 _printf
  000f8	83 c4 08	 add	 esp, 8
$LN6@listUserCa:

; 380  :         }
; 381  :         totalprice += order->price;

  000fb	8b 45 e0	 mov	 eax, DWORD PTR _order$1[ebp]
  000fe	8b 4d f8	 mov	 ecx, DWORD PTR _totalprice$[ebp]
  00101	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  00104	89 4d f8	 mov	 DWORD PTR _totalprice$[ebp], ecx

; 382  :     }

  00107	eb 82		 jmp	 SHORT $LN2@listUserCa
$LN3@listUserCa:

; 383  :     printf("Total money spent: %d pounds \n", totalprice);

  00109	8b 45 f8	 mov	 eax, DWORD PTR _totalprice$[ebp]
  0010c	50		 push	 eax
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EPPJMKLB@Total?5money?5spent?3?5?$CFd?5pounds?5?6@
  00112	e8 00 00 00 00	 call	 _printf
  00117	83 c4 08	 add	 esp, 8

; 384  :     puts("==================================");

  0011a	8b f4		 mov	 esi, esp
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HOICFALD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00127	83 c4 04	 add	 esp, 4
  0012a	3b f4		 cmp	 esi, esp
  0012c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@listUserCa:

; 385  : }

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
_listUserCarsMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _listCarMenu
_TEXT	SEGMENT
_sortedCar$1 = -56					; size = 4
_i$2 = -44						; size = 4
_sortedResults$ = -32					; size = 24
__$ArrayPad$ = -4					; size = 4
_listCarMenu PROC					; COMDAT

; 338  : void listCarMenu(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 339  : 
; 340  :     int sortedResults[MAXIMUM_CARS];
; 341  : 
; 342  :     getSortedCarStocksArray(sortedResults);

  00032	8d 45 e0	 lea	 eax, DWORD PTR _sortedResults$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _getSortedCarStocksArray
  0003b	83 c4 04	 add	 esp, 4

; 343  : 
; 344  :     puts("==================================");

  0003e	8b f4		 mov	 esi, esp
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HOICFALD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0004b	83 c4 04	 add	 esp, 4
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 345  : 
; 346  :     for (int i = 0; i < MAXIMUM_CARS; i++) {

  00055	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0005c	eb 09		 jmp	 SHORT $LN4@listCarMen
$LN2@listCarMen:
  0005e	8b 45 d4	 mov	 eax, DWORD PTR _i$2[ebp]
  00061	83 c0 01	 add	 eax, 1
  00064	89 45 d4	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@listCarMen:
  00067	83 7d d4 06	 cmp	 DWORD PTR _i$2[ebp], 6
  0006b	0f 8d 95 00 00
	00		 jge	 $LN3@listCarMen

; 347  : 
; 348  :         int sortedCar = sortedResults[i];

  00071	8b 45 d4	 mov	 eax, DWORD PTR _i$2[ebp]
  00074	8b 4c 85 e0	 mov	 ecx, DWORD PTR _sortedResults$[ebp+eax*4]
  00078	89 4d c8	 mov	 DWORD PTR _sortedCar$1[ebp], ecx

; 349  : 
; 350  :         if (isCarInStock(sortedCar)) {

  0007b	8b 45 c8	 mov	 eax, DWORD PTR _sortedCar$1[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _isCarInStock
  00084	83 c4 04	 add	 esp, 4
  00087	85 c0		 test	 eax, eax
  00089	74 76		 je	 SHORT $LN5@listCarMen

; 351  :             puts("");

  0008b	8b f4		 mov	 esi, esp
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00098	83 c4 04	 add	 esp, 4
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 352  :             printf("Name of the car: %s \n", shopCars[sortedCar]);

  000a2	8b 45 c8	 mov	 eax, DWORD PTR _sortedCar$1[ebp]
  000a5	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _shopCars[eax*4]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NLOLPOFC@Name?5of?5the?5car?3?5?$CFs?5?6@
  000b2	e8 00 00 00 00	 call	 _printf
  000b7	83 c4 08	 add	 esp, 8

; 353  :             printf("Remaining: %d \n", shopStock[sortedCar]);

  000ba	8b 45 c8	 mov	 eax, DWORD PTR _sortedCar$1[ebp]
  000bd	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _shopStock[eax*4]
  000c4	51		 push	 ecx
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GFBKPIIF@Remaining?3?5?$CFd?5?6@
  000ca	e8 00 00 00 00	 call	 _printf
  000cf	83 c4 08	 add	 esp, 8

; 354  :             printf("Price: %d pounds \n", shopPrices[sortedCar]);

  000d2	8b 45 c8	 mov	 eax, DWORD PTR _sortedCar$1[ebp]
  000d5	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _shopPrices[eax*4]
  000dc	51		 push	 ecx
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IDGDAABO@Price?3?5?$CFd?5pounds?5?6@
  000e2	e8 00 00 00 00	 call	 _printf
  000e7	83 c4 08	 add	 esp, 8

; 355  :             puts("");

  000ea	8b f4		 mov	 esi, esp
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000f7	83 c4 04	 add	 esp, 4
  000fa	3b f4		 cmp	 esi, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@listCarMen:

; 356  :         }
; 357  :     }

  00101	e9 58 ff ff ff	 jmp	 $LN2@listCarMen
$LN3@listCarMen:

; 358  :     puts("==================================");

  00106	8b f4		 mov	 esi, esp
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HOICFALD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00113	83 c4 04	 add	 esp, 4
  00116	3b f4		 cmp	 esi, esp
  00118	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 359  : }

  0011d	52		 push	 edx
  0011e	8b cd		 mov	 ecx, ebp
  00120	50		 push	 eax
  00121	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@listCarMen
  00127	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0012c	58		 pop	 eax
  0012d	5a		 pop	 edx
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5b		 pop	 ebx
  00131	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00134	33 cd		 xor	 ecx, ebp
  00136	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013b	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00141	3b ec		 cmp	 ebp, esp
  00143	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
$LN9@listCarMen:
  0014c	01 00 00 00	 DD	 1
  00150	00 00 00 00	 DD	 $LN8@listCarMen
$LN8@listCarMen:
  00154	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00158	18 00 00 00	 DD	 24			; 00000018H
  0015c	00 00 00 00	 DD	 $LN7@listCarMen
$LN7@listCarMen:
  00160	73		 DB	 115			; 00000073H
  00161	6f		 DB	 111			; 0000006fH
  00162	72		 DB	 114			; 00000072H
  00163	74		 DB	 116			; 00000074H
  00164	65		 DB	 101			; 00000065H
  00165	64		 DB	 100			; 00000064H
  00166	52		 DB	 82			; 00000052H
  00167	65		 DB	 101			; 00000065H
  00168	73		 DB	 115			; 00000073H
  00169	75		 DB	 117			; 00000075H
  0016a	6c		 DB	 108			; 0000006cH
  0016b	74		 DB	 116			; 00000074H
  0016c	73		 DB	 115			; 00000073H
  0016d	00		 DB	 0
_listCarMenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _askDetails
_TEXT	SEGMENT
_result$ = -8						; size = 4
_askDetails PROC					; COMDAT

; 543  : void askDetails(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 544  : 
; 545  :     int result = 0;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@askDetails:

; 546  : 
; 547  :     while (result  == 0) {

  0002f	83 7d f8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00033	75 2e		 jne	 SHORT $LN3@askDetails

; 548  :         puts("What is your name?");

  00035	8b f4		 mov	 esi, esp
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PMBBMMKN@What?5is?5your?5name?$DP@
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 549  :         result = scanf("\n%19s", &name);

  0004c	68 00 00 00 00	 push	 OFFSET _name
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_05IBLILGKA@?6?$CF19s@
  00056	e8 00 00 00 00	 call	 _scanf
  0005b	83 c4 08	 add	 esp, 8
  0005e	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax

; 550  :     }

  00061	eb cc		 jmp	 SHORT $LN2@askDetails
$LN3@askDetails:

; 551  : 
; 552  :     result = 0;

  00063	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 553  : 
; 554  :     getUnsignedShortFromInput(&age, "What is your age?");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PHFONAAN@What?5is?5your?5age?$DP@
  0006f	68 00 00 00 00	 push	 OFFSET _age
  00074	e8 00 00 00 00	 call	 _getUnsignedShortFromInput
  00079	83 c4 08	 add	 esp, 8

; 555  : 
; 556  :     if (age > 15 && age < 22) {

  0007c	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _age
  00083	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00086	7e 46		 jle	 SHORT $LN4@askDetails
  00088	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _age
  0008f	83 f8 16	 cmp	 eax, 22			; 00000016H
  00092	7d 3a		 jge	 SHORT $LN4@askDetails

; 557  :         puts("Our system detected that you are quite young to purchase a car!");

  00094	8b f4		 mov	 esi, esp
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FPINJJOD@Our?5system?5detected?5that?5you?5ar@
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000a1	83 c4 04	 add	 esp, 4
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 558  :         puts("To encourage ambition and drive we provide a 60 discount on all cars.");

  000ab	8b f4		 mov	 esi, esp
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@NKNOKGHF@To?5encourage?5ambition?5and?5drive@
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000b8	83 c4 04	 add	 esp, 4
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 559  :         discount = BOOLEAN_TRUE;

  000c2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _discount, 1

; 560  :     }

  000cc	eb 4c		 jmp	 SHORT $LN9@askDetails
$LN4@askDetails:

; 561  :     else if (age < 16 || age > 100) {

  000ce	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _age
  000d5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000d8	7c 0c		 jl	 SHORT $LN8@askDetails
  000da	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _age
  000e1	83 f8 64	 cmp	 eax, 100		; 00000064H
  000e4	7e 2a		 jle	 SHORT $LN6@askDetails
$LN8@askDetails:

; 562  :         puts("Too ensure safety on the roads, you are not allowed to use this program.");

  000e6	8b f4		 mov	 esi, esp
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@MAFECBAO@Too?5ensure?5safety?5on?5the?5roads?0@
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000f3	83 c4 04	 add	 esp, 4
  000f6	3b f4		 cmp	 esi, esp
  000f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 563  :         exit(0);

  000fd	8b f4		 mov	 esi, esp
  000ff	6a 00		 push	 0
  00101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00107	3b f4		 cmp	 esi, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 564  :     }

  0010e	eb 0a		 jmp	 SHORT $LN9@askDetails
$LN6@askDetails:

; 565  :     else {
; 566  :         discount = BOOLEAN_FALSE;

  00110	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _discount, 0
$LN9@askDetails:

; 567  :     }
; 568  : }

  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx
  0011d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00123	3b ec		 cmp	 ebp, esp
  00125	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
_askDetails ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _getCarNumberFromName
_TEXT	SEGMENT
_index$1 = -8						; size = 4
_name$ = 8						; size = 4
_getCarNumberFromName PROC				; COMDAT

; 612  : unsigned short getCarNumberFromName(char* name) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 613  : 
; 614  :     for (int index = 0; index < MAXIMUM_CARS; index++) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _index$1[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@getCarNumb
$LN2@getCarNumb:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _index$1[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _index$1[ebp], eax
$LN4@getCarNumb:
  0003a	83 7d f8 06	 cmp	 DWORD PTR _index$1[ebp], 6
  0003e	7d 2d		 jge	 SHORT $LN3@getCarNumb

; 615  : 
; 616  :         if (strcasecmp(name, shopCars[index]) == 0) {

  00040	8b f4		 mov	 esi, esp
  00042	8b 45 f8	 mov	 eax, DWORD PTR _index$1[ebp]
  00045	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _shopCars[eax*4]
  0004c	51		 push	 ecx
  0004d	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  00050	52		 push	 edx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  00057	83 c4 08	 add	 esp, 8
  0005a	3b f4		 cmp	 esi, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	85 c0		 test	 eax, eax
  00063	75 06		 jne	 SHORT $LN5@getCarNumb

; 617  :             return index;

  00065	66 8b 45 f8	 mov	 ax, WORD PTR _index$1[ebp]
  00069	eb 07		 jmp	 SHORT $LN1@getCarNumb
$LN5@getCarNumb:

; 618  :         }
; 619  :     }

  0006b	eb c4		 jmp	 SHORT $LN2@getCarNumb
$LN3@getCarNumb:

; 620  :     return 99;

  0006d	b8 63 00 00 00	 mov	 eax, 99			; 00000063H
$LN1@getCarNumb:

; 621  : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_getCarNumberFromName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _getSortedCarStocksArray
_TEXT	SEGMENT
_check$1 = -64						; size = 4
_indexpos$2 = -52					; size = 4
_index$3 = -40						; size = 4
_output$ = 8						; size = 4
_getSortedCarStocksArray PROC				; COMDAT

; 308  : void getSortedCarStocksArray(int* output) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00012	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 309  : 
; 310  :     int sortedResults[MAXIMUM_CARS];
; 311  : 
; 312  :     for (int index = 0; index < MAXIMUM_CARS; index++) {

  00028	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _index$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@getSortedC
$LN2@getSortedC:
  00031	8b 45 d8	 mov	 eax, DWORD PTR _index$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 d8	 mov	 DWORD PTR _index$3[ebp], eax
$LN4@getSortedC:
  0003a	83 7d d8 06	 cmp	 DWORD PTR _index$3[ebp], 6
  0003e	7d 7c		 jge	 SHORT $LN1@getSortedC

; 313  : 
; 314  :         int indexpos = 0; // represents the number of stocks higher than shopStock[index]

  00040	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _indexpos$2[ebp], 0

; 315  : 
; 316  :         for (int check = 0; check < MAXIMUM_CARS; check++) {

  00047	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _check$1[ebp], 0
  0004e	eb 09		 jmp	 SHORT $LN7@getSortedC
$LN5@getSortedC:
  00050	8b 45 c0	 mov	 eax, DWORD PTR _check$1[ebp]
  00053	83 c0 01	 add	 eax, 1
  00056	89 45 c0	 mov	 DWORD PTR _check$1[ebp], eax
$LN7@getSortedC:
  00059	83 7d c0 06	 cmp	 DWORD PTR _check$1[ebp], 6
  0005d	7d 29		 jge	 SHORT $LN8@getSortedC

; 317  : 
; 318  :             if (index != check && shopStock[index] <= shopStock[check]) { // sort array by shopStock

  0005f	8b 45 d8	 mov	 eax, DWORD PTR _index$3[ebp]
  00062	3b 45 c0	 cmp	 eax, DWORD PTR _check$1[ebp]
  00065	74 1f		 je	 SHORT $LN10@getSortedC
  00067	8b 45 d8	 mov	 eax, DWORD PTR _index$3[ebp]
  0006a	8b 4d c0	 mov	 ecx, DWORD PTR _check$1[ebp]
  0006d	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _shopStock[eax*4]
  00074	3b 14 8d 00 00
	00 00		 cmp	 edx, DWORD PTR _shopStock[ecx*4]
  0007b	77 09		 ja	 SHORT $LN10@getSortedC

; 319  :                 indexpos++;

  0007d	8b 45 cc	 mov	 eax, DWORD PTR _indexpos$2[ebp]
  00080	83 c0 01	 add	 eax, 1
  00083	89 45 cc	 mov	 DWORD PTR _indexpos$2[ebp], eax
$LN10@getSortedC:

; 320  :             }
; 321  :         }

  00086	eb c8		 jmp	 SHORT $LN5@getSortedC
$LN8@getSortedC:

; 322  : 
; 323  :         /**
; 324  :         * ThiS prevents the event of 2 indexes having the same indexpos
; 325  :         * as there can be scenarios where N cars stock that have the same number hence
; 326  :         * achieving the same indexpos.
; 327  :         * Therefore it performs a loop where it looks to find the nearest empty space (aka garbage value on the array)
; 328  :         */
; 329  : 
; 330  :         while (output[indexpos] >= 0 && output[indexpos] < MAXIMUM_CARS) { //

  00088	8b 45 cc	 mov	 eax, DWORD PTR _indexpos$2[ebp]
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _output$[ebp]
  0008e	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00092	7c 17		 jl	 SHORT $LN9@getSortedC
  00094	8b 45 cc	 mov	 eax, DWORD PTR _indexpos$2[ebp]
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _output$[ebp]
  0009a	83 3c 81 06	 cmp	 DWORD PTR [ecx+eax*4], 6
  0009e	7d 0b		 jge	 SHORT $LN9@getSortedC

; 331  :             indexpos--;

  000a0	8b 45 cc	 mov	 eax, DWORD PTR _indexpos$2[ebp]
  000a3	83 e8 01	 sub	 eax, 1
  000a6	89 45 cc	 mov	 DWORD PTR _indexpos$2[ebp], eax

; 332  :         }

  000a9	eb dd		 jmp	 SHORT $LN8@getSortedC
$LN9@getSortedC:

; 333  :         output[indexpos] = index;

  000ab	8b 45 cc	 mov	 eax, DWORD PTR _indexpos$2[ebp]
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _output$[ebp]
  000b1	8b 55 d8	 mov	 edx, DWORD PTR _index$3[ebp]
  000b4	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 334  : 
; 335  :     }

  000b7	e9 75 ff ff ff	 jmp	 $LN2@getSortedC
$LN1@getSortedC:

; 336  : }

  000bc	52		 push	 edx
  000bd	8b cd		 mov	 ecx, ebp
  000bf	50		 push	 eax
  000c0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@getSortedC
  000c6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cb	58		 pop	 eax
  000cc	5a		 pop	 edx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  000d6	3b ec		 cmp	 ebp, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
  000e1	0f 1f 00	 npad	 3
$LN14@getSortedC:
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN13@getSortedC
$LN13@getSortedC:
  000ec	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000f0	18 00 00 00	 DD	 24			; 00000018H
  000f4	00 00 00 00	 DD	 $LN12@getSortedC
$LN12@getSortedC:
  000f8	73		 DB	 115			; 00000073H
  000f9	6f		 DB	 111			; 0000006fH
  000fa	72		 DB	 114			; 00000072H
  000fb	74		 DB	 116			; 00000074H
  000fc	65		 DB	 101			; 00000065H
  000fd	64		 DB	 100			; 00000064H
  000fe	52		 DB	 82			; 00000052H
  000ff	65		 DB	 101			; 00000065H
  00100	73		 DB	 115			; 00000073H
  00101	75		 DB	 117			; 00000075H
  00102	6c		 DB	 108			; 0000006cH
  00103	74		 DB	 116			; 00000074H
  00104	73		 DB	 115			; 00000073H
  00105	00		 DB	 0
_getSortedCarStocksArray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _purchaseCar
_TEXT	SEGMENT
tv142 = -264						; size = 4
_order$ = -64						; size = 4
_price$ = -52						; size = 4
_carname$ = -40						; size = 20
_input$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_purchaseCar PROC					; COMDAT

; 253  : void purchaseCar(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 254  : 
; 255  :     unsigned short input = 9999;

  00032	b8 0f 27 00 00	 mov	 eax, 9999		; 0000270fH
  00037	66 89 45 f4	 mov	 WORD PTR _input$[ebp], ax

; 256  :     
; 257  :     listCarMenu(); // lists again cars for the user;

  0003b	e8 00 00 00 00	 call	 _listCarMenu

; 258  : 
; 259  :     char carname[20];
; 260  : 
; 261  :     
; 262  :     getStringFromInput(carname, "Which car do you want to buy?");

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@INANGNIE@Which?5car?5do?5you?5want?5to?5buy?$DP@
  00045	8d 45 d8	 lea	 eax, DWORD PTR _carname$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _getStringFromInput
  0004e	83 c4 08	 add	 esp, 8

; 263  : 
; 264  :     input = getCarNumberFromName(carname);

  00051	8d 45 d8	 lea	 eax, DWORD PTR _carname$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _getCarNumberFromName
  0005a	83 c4 04	 add	 esp, 4
  0005d	66 89 45 f4	 mov	 WORD PTR _input$[ebp], ax

; 265  : 
; 266  :     if (input == 99 ) {

  00061	0f b7 45 f4	 movzx	 eax, WORD PTR _input$[ebp]
  00065	83 f8 63	 cmp	 eax, 99			; 00000063H
  00068	75 1c		 jne	 SHORT $LN2@purchaseCa

; 267  :         puts("Invalid car.");

  0006a	8b f4		 mov	 esi, esp
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CPJOOGNP@Invalid?5car?4@
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00077	83 c4 04	 add	 esp, 4
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 268  :         return;

  00081	e9 97 01 00 00	 jmp	 $LN1@purchaseCa
$LN2@purchaseCa:

; 269  :     }
; 270  : 
; 271  :     if (!isCarInStock(input)) {

  00086	0f b7 45 f4	 movzx	 eax, WORD PTR _input$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _isCarInStock
  00090	83 c4 04	 add	 esp, 4
  00093	85 c0		 test	 eax, eax
  00095	75 1c		 jne	 SHORT $LN3@purchaseCa

; 272  :         puts("That car is not available.");

  00097	8b f4		 mov	 esi, esp
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DOFKKNPB@That?5car?5is?5not?5available?4@
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000a4	83 c4 04	 add	 esp, 4
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 273  :         return;

  000ae	e9 6a 01 00 00	 jmp	 $LN1@purchaseCa
$LN3@purchaseCa:

; 274  :     }
; 275  : 
; 276  :     int price = shopPrices[input];

  000b3	0f b7 45 f4	 movzx	 eax, WORD PTR _input$[ebp]
  000b7	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _shopPrices[eax*4]
  000be	89 4d cc	 mov	 DWORD PTR _price$[ebp], ecx

; 277  : 
; 278  :     if (discount) {

  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _discount, 0
  000c8	74 42		 je	 SHORT $LN4@purchaseCa

; 279  :         price = shopPrices[input] - (shopPrices[input] * 60 / 100);

  000ca	0f b7 4d f4	 movzx	 ecx, WORD PTR _input$[ebp]
  000ce	0f b7 55 f4	 movzx	 edx, WORD PTR _input$[ebp]
  000d2	6b 04 95 00 00
	00 00 3c	 imul	 eax, DWORD PTR _shopPrices[edx*4], 60
  000da	33 d2		 xor	 edx, edx
  000dc	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  000e1	f7 f6		 div	 esi
  000e3	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _shopPrices[ecx*4]
  000ea	2b c8		 sub	 ecx, eax
  000ec	89 4d cc	 mov	 DWORD PTR _price$[ebp], ecx

; 280  :         printf("You are eligible for discount! Original price: %d  Final price: %d \n", shopPrices[input], price);

  000ef	8b 45 cc	 mov	 eax, DWORD PTR _price$[ebp]
  000f2	50		 push	 eax
  000f3	0f b7 4d f4	 movzx	 ecx, WORD PTR _input$[ebp]
  000f7	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _shopPrices[ecx*4]
  000fe	52		 push	 edx
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@MOCADHFM@You?5are?5eligible?5for?5discount?$CB?5@
  00104	e8 00 00 00 00	 call	 _printf
  00109	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@purchaseCa:

; 281  :     }
; 282  : 
; 283  :     struct purchase* order = malloc(sizeof(struct purchase));

  0010c	8b f4		 mov	 esi, esp
  0010e	6a 24		 push	 36			; 00000024H
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00116	83 c4 04	 add	 esp, 4
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	89 45 c0	 mov	 DWORD PTR _order$[ebp], eax

; 284  : 
; 285  :     if (order == NULL) {

  00123	83 7d c0 00	 cmp	 DWORD PTR _order$[ebp], 0
  00127	75 1c		 jne	 SHORT $LN5@purchaseCa

; 286  :         puts("Coudln't complete your order! Try again later");

  00129	8b f4		 mov	 esi, esp
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KNEDOKBP@Coudln?8t?5complete?5your?5order?$CB?5T@
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00136	83 c4 04	 add	 esp, 4
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 287  :         return;

  00140	e9 d8 00 00 00	 jmp	 $LN1@purchaseCa
$LN5@purchaseCa:

; 288  :     }
; 289  : 
; 290  :     
; 291  :     order->discount_given = discount;

  00145	8b 45 c0	 mov	 eax, DWORD PTR _order$[ebp]
  00148	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _discount
  0014e	89 08		 mov	 DWORD PTR [eax], ecx

; 292  :     order->discount_value = discount ? (shopPrices[input] * 60 / 100) : 0;

  00150	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _discount, 0
  00157	74 1d		 je	 SHORT $LN7@purchaseCa
  00159	0f b7 45 f4	 movzx	 eax, WORD PTR _input$[ebp]
  0015d	6b 04 85 00 00
	00 00 3c	 imul	 eax, DWORD PTR _shopPrices[eax*4], 60
  00165	33 d2		 xor	 edx, edx
  00167	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0016c	f7 f1		 div	 ecx
  0016e	89 85 f8 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], eax
  00174	eb 0a		 jmp	 SHORT $LN8@purchaseCa
$LN7@purchaseCa:
  00176	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN8@purchaseCa:
  00180	8b 55 c0	 mov	 edx, DWORD PTR _order$[ebp]
  00183	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv142[ebp]
  00189	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 293  :     order->customer_age = age;

  0018c	8b 45 c0	 mov	 eax, DWORD PTR _order$[ebp]
  0018f	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _age
  00196	66 89 48 0e	 mov	 WORD PTR [eax+14], cx

; 294  :     order->price = price;

  0019a	8b 45 c0	 mov	 eax, DWORD PTR _order$[ebp]
  0019d	8b 4d cc	 mov	 ecx, DWORD PTR _price$[ebp]
  001a0	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 295  :     order->carnumber = input;

  001a3	8b 45 c0	 mov	 eax, DWORD PTR _order$[ebp]
  001a6	66 8b 4d f4	 mov	 cx, WORD PTR _input$[ebp]
  001aa	66 89 48 0c	 mov	 WORD PTR [eax+12], cx

; 296  :     
; 297  :     strcpy(order->name, name);

  001ae	68 00 00 00 00	 push	 OFFSET _name
  001b3	8b 45 c0	 mov	 eax, DWORD PTR _order$[ebp]
  001b6	83 c0 10	 add	 eax, 16			; 00000010H
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _strcpy
  001bf	83 c4 08	 add	 esp, 8

; 298  :     
; 299  :     printf("Congratulations %s, \n", order->name);

  001c2	8b 45 c0	 mov	 eax, DWORD PTR _order$[ebp]
  001c5	83 c0 10	 add	 eax, 16			; 00000010H
  001c8	50		 push	 eax
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HLADGABG@Congratulations?5?$CFs?0?5?6@
  001ce	e8 00 00 00 00	 call	 _printf
  001d3	83 c4 08	 add	 esp, 8

; 300  :     printf("You have just succesfully purchased a %s for %d pounds. \n", shopCars[input], price);

  001d6	8b 45 cc	 mov	 eax, DWORD PTR _price$[ebp]
  001d9	50		 push	 eax
  001da	0f b7 4d f4	 movzx	 ecx, WORD PTR _input$[ebp]
  001de	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _shopCars[ecx*4]
  001e5	52		 push	 edx
  001e6	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@FNJFJKBH@You?5have?5just?5succesfully?5purch@
  001eb	e8 00 00 00 00	 call	 _printf
  001f0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 301  : 
; 302  :     vector_add(&purchases, order);

  001f3	8b 45 c0	 mov	 eax, DWORD PTR _order$[ebp]
  001f6	50		 push	 eax
  001f7	68 00 00 00 00	 push	 OFFSET _purchases
  001fc	e8 00 00 00 00	 call	 _vector_add
  00201	83 c4 08	 add	 esp, 8

; 303  : 
; 304  :     shopStock[input] = shopStock[input] - 1;

  00204	0f b7 45 f4	 movzx	 eax, WORD PTR _input$[ebp]
  00208	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _shopStock[eax*4]
  0020f	83 e9 01	 sub	 ecx, 1
  00212	0f b7 55 f4	 movzx	 edx, WORD PTR _input$[ebp]
  00216	89 0c 95 00 00
	00 00		 mov	 DWORD PTR _shopStock[edx*4], ecx
$LN1@purchaseCa:

; 305  : 
; 306  : }

  0021d	52		 push	 edx
  0021e	8b cd		 mov	 ecx, ebp
  00220	50		 push	 eax
  00221	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@purchaseCa
  00227	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0022c	58		 pop	 eax
  0022d	5a		 pop	 edx
  0022e	5f		 pop	 edi
  0022f	5e		 pop	 esi
  00230	5b		 pop	 ebx
  00231	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00234	33 cd		 xor	 ecx, ebp
  00236	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023b	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00241	3b ec		 cmp	 ebp, esp
  00243	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c3		 ret	 0
$LN11@purchaseCa:
  0024c	01 00 00 00	 DD	 1
  00250	00 00 00 00	 DD	 $LN10@purchaseCa
$LN10@purchaseCa:
  00254	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00258	14 00 00 00	 DD	 20			; 00000014H
  0025c	00 00 00 00	 DD	 $LN9@purchaseCa
$LN9@purchaseCa:
  00260	63		 DB	 99			; 00000063H
  00261	61		 DB	 97			; 00000061H
  00262	72		 DB	 114			; 00000072H
  00263	6e		 DB	 110			; 0000006eH
  00264	61		 DB	 97			; 00000061H
  00265	6d		 DB	 109			; 0000006dH
  00266	65		 DB	 101			; 00000065H
  00267	00		 DB	 0
_purchaseCar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _saveData
_TEXT	SEGMENT
_orderptr$1 = -32					; size = 4
_i$2 = -20						; size = 4
_file$ = -8						; size = 4
_saveData PROC						; COMDAT

; 515  : void saveData(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 516  : 
; 517  :     FILE* file;
; 518  : 
; 519  :     file = fopen("sales.txt", "w");

  00028	8b f4		 mov	 esi, esp
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_09BCHCLGJI@sales?4txt@
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0003a	83 c4 08	 add	 esp, 8
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	89 45 f8	 mov	 DWORD PTR _file$[ebp], eax

; 520  : 
; 521  : 
; 522  :     if (file == NULL) {

  00047	83 7d f8 00	 cmp	 DWORD PTR _file$[ebp], 0
  0004b	75 05		 jne	 SHORT $LN5@saveData

; 523  :         return;

  0004d	e9 8c 00 00 00	 jmp	 $LN1@saveData
$LN5@saveData:

; 524  :     }
; 525  : 
; 526  :     for (int i = 0; i < vector_total(&purchases); i++) {

  00052	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@saveData
$LN2@saveData:
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 ec	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@saveData:
  00064	68 00 00 00 00	 push	 OFFSET _purchases
  00069	e8 00 00 00 00	 call	 _vector_total
  0006e	83 c4 04	 add	 esp, 4
  00071	39 45 ec	 cmp	 DWORD PTR _i$2[ebp], eax
  00074	7d 52		 jge	 SHORT $LN3@saveData

; 527  :         struct purchase* orderptr = vector_get(&purchases, i);

  00076	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET _purchases
  0007f	e8 00 00 00 00	 call	 _vector_get
  00084	83 c4 08	 add	 esp, 8
  00087	89 45 e0	 mov	 DWORD PTR _orderptr$1[ebp], eax

; 528  :         fprintf(file, "%d:%d:%d:%hu:%hu:%19s\n", orderptr->price, orderptr->discount_given, orderptr->discount_value, orderptr->carnumber, orderptr->customer_age, orderptr->name);

  0008a	8b 45 e0	 mov	 eax, DWORD PTR _orderptr$1[ebp]
  0008d	83 c0 10	 add	 eax, 16			; 00000010H
  00090	50		 push	 eax
  00091	8b 4d e0	 mov	 ecx, DWORD PTR _orderptr$1[ebp]
  00094	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]
  00098	52		 push	 edx
  00099	8b 45 e0	 mov	 eax, DWORD PTR _orderptr$1[ebp]
  0009c	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  000a0	51		 push	 ecx
  000a1	8b 55 e0	 mov	 edx, DWORD PTR _orderptr$1[ebp]
  000a4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a7	50		 push	 eax
  000a8	8b 4d e0	 mov	 ecx, DWORD PTR _orderptr$1[ebp]
  000ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ad	52		 push	 edx
  000ae	8b 45 e0	 mov	 eax, DWORD PTR _orderptr$1[ebp]
  000b1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b4	51		 push	 ecx
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HOPEIMKC@?$CFd?3?$CFd?3?$CFd?3?$CFhu?3?$CFhu?3?$CF19s?6@
  000ba	8b 55 f8	 mov	 edx, DWORD PTR _file$[ebp]
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 _fprintf
  000c3	83 c4 20	 add	 esp, 32			; 00000020H

; 529  :     }

  000c6	eb 93		 jmp	 SHORT $LN2@saveData
$LN3@saveData:

; 530  : 
; 531  :     fclose(file);

  000c8	8b f4		 mov	 esi, esp
  000ca	8b 45 f8	 mov	 eax, DWORD PTR _file$[ebp]
  000cd	50		 push	 eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000d4	83 c4 04	 add	 esp, 4
  000d7	3b f4		 cmp	 esi, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@saveData:

; 532  : }

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_saveData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _loadData
_TEXT	SEGMENT
_orderptr$1 = -80					; size = 4
_result$ = -68						; size = 4
_order$ = -56						; size = 36
_file$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_loadData PROC						; COMDAT

; 473  : void loadData(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00012	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 474  : 
; 475  :     FILE* file;
; 476  : 
; 477  :     file = fopen("sales.txt", "r");

  00032	8b f4		 mov	 esi, esp
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_09BCHCLGJI@sales?4txt@
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00044	83 c4 08	 add	 esp, 8
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	89 45 f4	 mov	 DWORD PTR _file$[ebp], eax

; 478  : 
; 479  :     if (file == NULL) {

  00051	83 7d f4 00	 cmp	 DWORD PTR _file$[ebp], 0
  00055	75 05		 jne	 SHORT $LN4@loadData

; 480  :         return;

  00057	e9 fb 00 00 00	 jmp	 $LN1@loadData
$LN4@loadData:

; 481  :     }
; 482  :     
; 483  :     struct purchase order;
; 484  : 
; 485  :     int result = 0;

  0005c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@loadData:

; 486  : 
; 487  : 
; 488  :     while ((result = fscanf(file, "%d:%d:%d:%hu:%hu:%19s", &order.price, &order.discount_given, &order.discount_value, &order.carnumber, &order.customer_age, order.name)) != EOF) {

  00063	8d 45 d8	 lea	 eax, DWORD PTR _order$[ebp+16]
  00066	50		 push	 eax
  00067	8d 4d d6	 lea	 ecx, DWORD PTR _order$[ebp+14]
  0006a	51		 push	 ecx
  0006b	8d 55 d4	 lea	 edx, DWORD PTR _order$[ebp+12]
  0006e	52		 push	 edx
  0006f	8d 45 cc	 lea	 eax, DWORD PTR _order$[ebp+4]
  00072	50		 push	 eax
  00073	8d 4d c8	 lea	 ecx, DWORD PTR _order$[ebp]
  00076	51		 push	 ecx
  00077	8d 55 d0	 lea	 edx, DWORD PTR _order$[ebp+8]
  0007a	52		 push	 edx
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KFCFPGBD@?$CFd?3?$CFd?3?$CFd?3?$CFhu?3?$CFhu?3?$CF19s@
  00080	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _fscanf
  00089	83 c4 20	 add	 esp, 32			; 00000020H
  0008c	89 45 bc	 mov	 DWORD PTR _result$[ebp], eax
  0008f	83 7d bc ff	 cmp	 DWORD PTR _result$[ebp], -1
  00093	0f 84 a8 00 00
	00		 je	 $LN3@loadData

; 489  : 
; 490  :         if (result == 0) {

  00099	83 7d bc 00	 cmp	 DWORD PTR _result$[ebp], 0
  0009d	75 05		 jne	 SHORT $LN5@loadData

; 491  :             break;

  0009f	e9 9d 00 00 00	 jmp	 $LN3@loadData
$LN5@loadData:

; 492  :         }
; 493  : 
; 494  :         struct purchase* orderptr = malloc(sizeof(struct purchase));

  000a4	8b f4		 mov	 esi, esp
  000a6	6a 24		 push	 36			; 00000024H
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000ae	83 c4 04	 add	 esp, 4
  000b1	3b f4		 cmp	 esi, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	89 45 b0	 mov	 DWORD PTR _orderptr$1[ebp], eax

; 495  : 
; 496  :         if (orderptr != NULL) {

  000bb	83 7d b0 00	 cmp	 DWORD PTR _orderptr$1[ebp], 0
  000bf	74 7b		 je	 SHORT $LN6@loadData

; 497  : 
; 498  :             orderptr->discount_given = order.discount_given;

  000c1	8b 45 b0	 mov	 eax, DWORD PTR _orderptr$1[ebp]
  000c4	8b 4d c8	 mov	 ecx, DWORD PTR _order$[ebp]
  000c7	89 08		 mov	 DWORD PTR [eax], ecx

; 499  :             orderptr->discount_value = order.discount_value;

  000c9	8b 45 b0	 mov	 eax, DWORD PTR _orderptr$1[ebp]
  000cc	8b 4d cc	 mov	 ecx, DWORD PTR _order$[ebp+4]
  000cf	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 500  :             orderptr->customer_age = order.customer_age;

  000d2	8b 45 b0	 mov	 eax, DWORD PTR _orderptr$1[ebp]
  000d5	66 8b 4d d6	 mov	 cx, WORD PTR _order$[ebp+14]
  000d9	66 89 48 0e	 mov	 WORD PTR [eax+14], cx

; 501  :             orderptr->price = order.price;

  000dd	8b 45 b0	 mov	 eax, DWORD PTR _orderptr$1[ebp]
  000e0	8b 4d d0	 mov	 ecx, DWORD PTR _order$[ebp+8]
  000e3	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 502  :             orderptr->carnumber = order.carnumber;

  000e6	8b 45 b0	 mov	 eax, DWORD PTR _orderptr$1[ebp]
  000e9	66 8b 4d d4	 mov	 cx, WORD PTR _order$[ebp+12]
  000ed	66 89 48 0c	 mov	 WORD PTR [eax+12], cx

; 503  : 
; 504  :             strcpy(orderptr->name, order.name);

  000f1	8d 45 d8	 lea	 eax, DWORD PTR _order$[ebp+16]
  000f4	50		 push	 eax
  000f5	8b 4d b0	 mov	 ecx, DWORD PTR _orderptr$1[ebp]
  000f8	83 c1 10	 add	 ecx, 16			; 00000010H
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 _strcpy
  00101	83 c4 08	 add	 esp, 8

; 505  : 
; 506  :             if (shopStock[order.carnumber] > 0) { // preventing stock from growing infinitely negative

  00104	0f b7 45 d4	 movzx	 eax, WORD PTR _order$[ebp+12]
  00108	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _shopStock[eax*4], 0
  00110	76 19		 jbe	 SHORT $LN7@loadData

; 507  :                 shopStock[order.carnumber]--;

  00112	0f b7 45 d4	 movzx	 eax, WORD PTR _order$[ebp+12]
  00116	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _shopStock[eax*4]
  0011d	83 e9 01	 sub	 ecx, 1
  00120	0f b7 55 d4	 movzx	 edx, WORD PTR _order$[ebp+12]
  00124	89 0c 95 00 00
	00 00		 mov	 DWORD PTR _shopStock[edx*4], ecx
$LN7@loadData:

; 508  :             }
; 509  :             vector_add(&purchases, orderptr);

  0012b	8b 45 b0	 mov	 eax, DWORD PTR _orderptr$1[ebp]
  0012e	50		 push	 eax
  0012f	68 00 00 00 00	 push	 OFFSET _purchases
  00134	e8 00 00 00 00	 call	 _vector_add
  00139	83 c4 08	 add	 esp, 8
$LN6@loadData:

; 510  :         }
; 511  :     }

  0013c	e9 22 ff ff ff	 jmp	 $LN2@loadData
$LN3@loadData:

; 512  :     fclose(file);

  00141	8b f4		 mov	 esi, esp
  00143	8b 45 f4	 mov	 eax, DWORD PTR _file$[ebp]
  00146	50		 push	 eax
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0014d	83 c4 04	 add	 esp, 4
  00150	3b f4		 cmp	 esi, esp
  00152	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@loadData:

; 513  : }

  00157	52		 push	 edx
  00158	8b cd		 mov	 ecx, ebp
  0015a	50		 push	 eax
  0015b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@loadData
  00161	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00166	58		 pop	 eax
  00167	5a		 pop	 edx
  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	5b		 pop	 ebx
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016e	33 cd		 xor	 ecx, ebp
  00170	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00175	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  0017b	3b ec		 cmp	 ebp, esp
  0017d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c3		 ret	 0
  00186	66 90		 npad	 2
$LN11@loadData:
  00188	01 00 00 00	 DD	 1
  0018c	00 00 00 00	 DD	 $LN10@loadData
$LN10@loadData:
  00190	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00194	24 00 00 00	 DD	 36			; 00000024H
  00198	00 00 00 00	 DD	 $LN9@loadData
$LN9@loadData:
  0019c	6f		 DB	 111			; 0000006fH
  0019d	72		 DB	 114			; 00000072H
  0019e	64		 DB	 100			; 00000064H
  0019f	65		 DB	 101			; 00000065H
  001a0	72		 DB	 114			; 00000072H
  001a1	00		 DB	 0
_loadData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _isCarInStock
_TEXT	SEGMENT
tv67 = -196						; size = 4
_carindex$ = 8						; size = 4
_isCarInStock PROC					; COMDAT

; 238  : int isCarInStock(int carindex) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 239  :     return shopStock[carindex] > 0;

  00028	8b 45 08	 mov	 eax, DWORD PTR _carindex$[ebp]
  0002b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _shopStock[eax*4], 0
  00033	76 0c		 jbe	 SHORT $LN3@isCarInSto
  00035	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv67[ebp], 1
  0003f	eb 0a		 jmp	 SHORT $LN4@isCarInSto
$LN3@isCarInSto:
  00041	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
$LN4@isCarInSto:
  0004b	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv67[ebp]

; 240  : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_isCarInStock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\Desktop\carsales project\carsales project\carsales project.c
;	COMDAT _hasCarsPurchased
_TEXT	SEGMENT
_order$1 = -20						; size = 4
_i$2 = -8						; size = 4
_hasCarsPurchased PROC					; COMDAT

; 241  : int hasCarsPurchased(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E5C7318A_carsales project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 242  : 
; 243  :     for (int i = 0; i < vector_total(&purchases); i++) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@hasCarsPur
$LN2@hasCarsPur:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@hasCarsPur:
  0003a	68 00 00 00 00	 push	 OFFSET _purchases
  0003f	e8 00 00 00 00	 call	 _vector_total
  00044	83 c4 04	 add	 esp, 4
  00047	39 45 f8	 cmp	 DWORD PTR _i$2[ebp], eax
  0004a	7d 35		 jge	 SHORT $LN3@hasCarsPur

; 244  : 
; 245  :         struct purchase * order = vector_get(&purchases, i);

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0004f	50		 push	 eax
  00050	68 00 00 00 00	 push	 OFFSET _purchases
  00055	e8 00 00 00 00	 call	 _vector_get
  0005a	83 c4 08	 add	 esp, 8
  0005d	89 45 ec	 mov	 DWORD PTR _order$1[ebp], eax

; 246  :         if (strcmp(order->name, name) == 0) {

  00060	68 00 00 00 00	 push	 OFFSET _name
  00065	8b 45 ec	 mov	 eax, DWORD PTR _order$1[ebp]
  00068	83 c0 10	 add	 eax, 16			; 00000010H
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _strcmp
  00071	83 c4 08	 add	 esp, 8
  00074	85 c0		 test	 eax, eax
  00076	75 07		 jne	 SHORT $LN5@hasCarsPur

; 247  :             return BOOLEAN_TRUE;

  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	eb 04		 jmp	 SHORT $LN1@hasCarsPur
$LN5@hasCarsPur:

; 248  :         } 
; 249  :     }

  0007f	eb b0		 jmp	 SHORT $LN2@hasCarsPur
$LN3@hasCarsPur:

; 250  :     return BOOLEAN_FALSE;

  00081	33 c0		 xor	 eax, eax
$LN1@hasCarsPur:

; 251  : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_hasCarsPurchased ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _scanf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_scanf	PROC						; COMDAT

; 1282 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1283 :         int _Result;
; 1284 :         va_list _ArgList;
; 1285 :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1286 :         _Result = _vfscanf_l(stdin, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 00		 push	 0
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfscanf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1287 :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1288 :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1289 :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_scanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _fscanf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fscanf	PROC						; COMDAT

; 1206 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1207 :         int _Result;
; 1208 :         va_list _ArgList;
; 1209 :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1210 :         _Result = _vfscanf_l(_Stream, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vfscanf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1211 :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1212 :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1213 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_fscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1064 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1065 :         return __stdio_common_vfscanf(

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfscanf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1066 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1067 :             _Stream, _Format, _Locale, _ArgList);
; 1068 :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 956  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 961  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 962  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 963  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vfprintf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 842  :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 843  :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 844  :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 646  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 100  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A2143F22_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A2143F22_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
